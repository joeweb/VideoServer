<?xml version="1.0" encoding="UTF-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/util 
			http://www.springframework.org/schema/util/spring-util-2.0.xsd
			">
	
	<bean id="roomsManager" class="org.bigbluebutton.conference.RoomsManager">
		<property name="messagingService" ref="messagingService"></property>
		<property name="conversionUpdatesMessageListener" ref="conversionUpdatesMessageListener"></property>
	</bean>
	
	<bean id="bigbluebutton.service" class="org.bigbluebutton.conference.BigBlueButtonService">
      <property name="connInvokerService"> <ref bean="connInvokerService"/></property>
    </bean>
  		
	<bean id="participantsHandler" class="org.bigbluebutton.conference.service.participants.ParticipantsHandler">
		<property name="participantsApplication"> <ref local="participantsApplication"/></property>
		<property name="recorderApplication"> <ref local="recorderApplication"/></property>
	</bean>
	
	<bean id="participantsApplication" class="org.bigbluebutton.conference.service.participants.ParticipantsApplication">
		<property name="roomsManager"> <ref local="roomsManager"/></property>
		<property name="connInvokerService"> <ref bean="connInvokerService"/></property>
	</bean>
	
	<bean id="participants.service" class="org.bigbluebutton.conference.service.participants.ParticipantsService">
		<property name="participantsApplication"> <ref local="participantsApplication"/></property>
	</bean>
	
	
	<!-- BEGIN LAYOUT -->	
	<bean id="layoutRoomsManager" class="org.bigbluebutton.conference.service.layout.LayoutRoomsManager"/>
	
	<bean id="layoutHandler" class="org.bigbluebutton.conference.service.layout.LayoutHandler">
	    <property name="layoutApplication"><ref local="layoutApplication"/></property>
	</bean>

	<bean id="layoutApplication" class="org.bigbluebutton.conference.service.layout.LayoutApplication">
		<property name="roomsManager"><ref local="layoutRoomsManager"/></property>
	</bean>
	
	<bean id="layout.service" class="org.bigbluebutton.conference.service.layout.LayoutService">
	    <property name="layoutApplication"><ref local="layoutApplication"/></property>
   	</bean>	
	<!-- END LAYOUT -->	
		
	<!-- BEGIN PRESENTATION -->	
	<bean id="presentationRoomsManager" class="org.bigbluebutton.conference.service.presentation.PresentationRoomsManager"/>
			
	<bean id="presentationHandler" class="org.bigbluebutton.conference.service.presentation.PresentationHandler">
		<property name="presentationApplication"> 
			<ref local="presentationApplication"/>
		</property>
		<property name="recorderApplication"> 
			<ref local="recorderApplication"/>
		</property>
		<property name="conversionUpdatesMessageListener"> 
			<ref local="conversionUpdatesMessageListener" />
		</property>
	</bean>
	
	<bean id="presentationApplication" class="org.bigbluebutton.conference.service.presentation.PresentationApplication">
		<property name="roomsManager"> <ref local="presentationRoomsManager"/></property>
		<property name="connInvokerService"> <ref bean="connInvokerService"/></property>
	</bean>
	
	<bean id="presentation.service" class="org.bigbluebutton.conference.service.presentation.PresentationService">
		<property name="participantsApplication"> <ref local="participantsApplication"/></property>
		<property name="presentationApplication"> <ref local="presentationApplication"/></property>
	</bean>

	<bean id="conversionUpdatesProcessor" class="org.bigbluebutton.conference.service.presentation.ConversionUpdatesProcessor">
		<property name="presentationApplication"> <ref local="presentationApplication"/></property>
	</bean>

	<bean id="conversionUpdatesMessageListener" class="org.bigbluebutton.conference.service.presentation.ConversionUpdatesMessageListener">
		<property name="conversionUpdatesProcessor" ref="conversionUpdatesProcessor" />
	</bean>

  	<!-- END PRESENTATION -->
  	
  	<!-- BEGIN CHAT -->
  	<bean id="chatHandler" class="org.bigbluebutton.conference.service.chat.ChatHandler">
		<property name="chatApplication"> <ref local="chatApplication"/></property>
		<property name="recorderApplication"> <ref local="recorderApplication"/></property>
	</bean>
	
	<bean id="chatApplication" class="org.bigbluebutton.conference.service.chat.ChatApplication">
		<property name="roomsManager"> <ref local="chatRoomsManager"/></property>
		<property name="connInvokerService"> <ref bean="connInvokerService"/></property>
	</bean>
	
	<bean id="chat.service" class="org.bigbluebutton.conference.service.chat.ChatService">
		<property name="chatApplication"> <ref local="chatApplication"/></property>
	</bean>
	
	<bean id="chatRoomsManager" class="org.bigbluebutton.conference.service.chat.ChatRoomsManager"/>
	<!-- END CHAT -->
	
	<!-- WHITEBOARD -->
	<bean id="whiteboardApplication" 
	    class="org.bigbluebutton.conference.service.whiteboard.WhiteboardApplication">
	    <property name="roomManager"> <ref local="whiteboardRoomManager"/></property>
	    <property name="recorderApplication"> <ref local="recorderApplication"/></property>
	    <property name="connInvokerService"> <ref bean="connInvokerService"/></property>
	</bean>
	
	<bean id="whiteboard.service" class="org.bigbluebutton.conference.service.whiteboard.WhiteboardService">
		<property name="whiteboardApplication"> <ref local="whiteboardApplication"/></property>
	</bean>
	
	<bean id="whiteboardRoomManager" class="org.bigbluebutton.conference.service.whiteboard.WhiteboardRoomManager"/>
	<!-- END WHITEBOARD -->
	
	<!-- RECORDER AND MESSAGING -->
	
	<bean id="recorderApplication" class="org.bigbluebutton.conference.service.recorder.RecorderApplication">
		<property name="recorder"><ref local="redisRecorder" /> </property>
	</bean>
	
	<bean id="redisRecorder" class="org.bigbluebutton.conference.service.recorder.RedisDispatcher">
        <property name="redisPool"><ref local="redisPool" /> </property>
    </bean>
	
    <bean id="messagingService" class="org.bigbluebutton.conference.service.messaging.RedisMessagingService">
    	<property name="redisPool" ref="redisPool"/>
  	</bean>
    
    <bean id="config" class="org.bigbluebutton.conference.service.recorder.GenericObjectPoolConfigWrapper">
	  <!-- Action to take when trying to acquire a connection and all connections are taken -->
	  <property name="whenExhaustedAction">
	    <!-- Fail-fast behaviour, we don't like to keep the kids waiting -->
	    <util:constant static-field="org.apache.commons.pool.impl.GenericObjectPool.WHEN_EXHAUSTED_FAIL" />
	    <!-- Default behaviour, block the caller until a resource becomes available -->
	    <!--<util:constant static-field="org.apache.commons.pool.impl.GenericObjectPool.WHEN_EXHAUSTED_BLOCK" />-->
	  </property>
	  <!-- Maximum active connections to Redis instance -->
	  <property name="maxActive" value="12" />
	  <!-- Number of connections to Redis that just sit there and do nothing -->
	  <property name="maxIdle" value="6" />
	  <!-- Minimum number of idle connections to Redis - these can be seen as always open and ready to serve -->
	  <property name="minIdle" value="1" />
	  <!-- Tests whether connection is dead when connection retrieval method is called -->
	  <property name="testOnBorrow" value="true" />
	  <!-- Tests whether connection is dead when returning a connection to the pool -->
	  <property name="testOnReturn" value="true" />
	  <!-- Tests whether connections are dead during idle periods -->
	  <property name="testWhileIdle" value="true" />
	  <!-- Maximum number of connections to test in each idle check -->
	  <property name="numTestsPerEvictionRun" value="12" />
	  <!-- Idle connection checking period -->
	  <property name="timeBetweenEvictionRunsMillis" value="60000" />
	  <!-- Maximum time, in milliseconds, to wait for a resource when exausted action is set to WHEN_EXAUSTED_BLOCK -->
	  <property name="maxWait" value="5000" />
	</bean>
    
    <bean id="redisPool" class="redis.clients.jedis.JedisPool">
    	<constructor-arg index="0">
    		<bean factory-bean="config" factory-method="getConfig" />
  		</constructor-arg>
        <constructor-arg index="1" value="${redis.host}"/>
        <constructor-arg index="2" value="${redis.port}"/>
    </bean>
	
    
    <!-- END RECORDER AND MESSAGING -->
    
</beans>
