<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		xmlns:flexmdi="flexlib.mdi.containers.*"
		xmlns:logModule="org.bigbluebutton.modules.log.view.components.*"
		xmlns:views="org.bigbluebutton.main.views.*"
		xmlns:mate="http://mate.asfusion.com/"
		xmlns:maps="org.bigbluebutton.main.maps.*"
		xmlns:api="org.bigbluebutton.main.api.*"
		width="100%" height="100%" 
		creationComplete="initializeShell()" xmlns:common="org.bigbluebutton.common.*">
		
	<mate:Listener type="{OpenWindowEvent.OPEN_WINDOW_EVENT}" method="handleOpenWindowEvent" />	
	<mate:Listener type="{CloseWindowEvent.CLOSE_WINDOW_EVENT}" method="handleCloseWindowEvent"/>
	<mate:Listener type="{AddUIComponentToMainCanvas.ADD_COMPONENT}" method="addComponentToCanvas" />
	<mate:Listener type="{AppVersionEvent.APP_VERSION_EVENT}" method="handleApplicationVersionEvent" />	
	<mate:Listener type="{ConnectionFailedEvent.USER_LOGGED_OUT}" method="handleLogout" />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_FAILED}" method="attemptReconnect" />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_CLOSED}" method="attemptReconnect"  />
	<mate:Listener type="{ConnectionFailedEvent.UNKNOWN_REASON}" method="attemptReconnect"  />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_REJECTED}" method="attemptReconnect"  />
	<mate:Listener type="configLoadedEvent" method="initOptions"  />
	<mate:Listener type="SHOW_MIC_SETTINGS" method="showMicSettings"  />
	<mate:Listener type="{ToolbarButtonEvent.ADD}" method="handleAddToolbarComponent" />	
	<mate:Listener type="{ToolbarButtonEvent.REMOVE}" method="handleRemoveToolbarComponent"/>
	<mate:Listener type="{ShortcutEvent.OPEN_SHORTCUT_WIN}" method="openShortcutHelpWindow" />
  <mate:Listener type="{BBBEvent.OPEN_WEBCAM_PREVIEW}" method="openVideoPreviewWindow" />
  
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.events.MouseEvent;
			
			import flexlib.mdi.containers.MDIWindow;
			import flexlib.mdi.effects.effectsLib.MDIVistaEffects;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import flash.geom.Point;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.events.AddUIComponentToMainCanvas;
			import org.bigbluebutton.common.events.CloseWindowEvent;
			import org.bigbluebutton.common.events.OpenWindowEvent;
			import org.bigbluebutton.common.events.ToolbarButtonEvent;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.main.events.AppVersionEvent;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ConfigEvent;
			import org.bigbluebutton.main.events.ModuleLoadEvent;
			import org.bigbluebutton.main.events.PortTestEvent;
			import org.bigbluebutton.main.events.RecordStatusEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.events.SuccessfulLoginEvent;
			import org.bigbluebutton.main.model.LayoutOptions;
			import org.bigbluebutton.main.model.users.events.ConnectionFailedEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import org.bigbluebutton.util.logging.Logger;
	
			private var globalDispatcher:Dispatcher;			
			private var dispState:String; //full-screen?
			private var images:Images = new Images();
			private var stoppedModules:ArrayCollection;			
			private var logs:Logger = new Logger();
			private var logWindow:LogWindow;
			private var scWindow:ShortcutHelpWindow;
			private var logoutWindow:LoggedOutWindow;
			private var connectionLostWindow:ConnectionLostWindow;
			
			// LIVE or PLAYBACK
			private var _mode:String = 'LIVE';
			[Bindable] public var appVersion:String = ' ';
			private var localeVersion:String = 'old';
			[Bindable] public var numberOfModules:int = 0;
			
			[Bindable] private var fullscreen_icon:Class = images.full_screen;
			[Bindable] private var logs_icon:Class = images.table;
			[Bindable] private var reset_layout_icon:Class = images.layout;
      [Bindable] private var statsIcon:Class = images.bandwidth;
      
			private var receivedConfigLocaleVer:Boolean = false;
			private var receivedResourceLocaleVer:Boolean = false;
			
			public function get mode():String {
				return _mode;
			}
			
			[Bindable] private var layoutOptions:LayoutOptions;
			
			[Bindable] private var showToolbarOpt:Boolean = true;
			[Bindable] private var toolbarHeight:Number = 30;
      [Bindable] private var toolbarPaddingTop:Number = 4;
      [Bindable] private var showFooterOpt:Boolean = true;
      [Bindable] private var footerHeight:Number = 20;
      
      [Bindable] private var isTunneling:Boolean = false;
      
			public function initOptions(e:Event):void {
				layoutOptions = new LayoutOptions();
				layoutOptions.parseOptions();
				showToolbarOpt = layoutOptions.showToolbar;
				if (!showToolbarOpt) {
          toolbarHeight = 0;
          toolbarPaddingTop = 0;
        }
				toolbar.displayToolbar();
        
        showFooterOpt = layoutOptions.showFooter;
        if (!showFooterOpt) {
          footerHeight = 0;
        }
			
        
      }
			
			protected function initializeShell():void {	
				globalDispatcher = new Dispatcher();	
			}
		
			protected function initFullScreen():void {				
				/* Set up full screen handler. */
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				dispState = stage.displayState;
			}					
			
			private var sendStartModulesEvent:Boolean = true;
			
			private function handleApplicationVersionEvent(event:AppVersionEvent):void {
				if (event.configLocaleVersion == true) {
					receivedConfigLocaleVer = true;
					appVersion = event.appVersion;
					localeVersion = event.localeVersion;
//					LogUtil.debug("Received locale version fron config.xml");
				} else {
					receivedResourceLocaleVer = true;
					LogUtil.debug("Received locale version fron locale file.");
				}
				
				if (receivedConfigLocaleVer && receivedResourceLocaleVer) {
					LogUtil.debug("Comparing locale versions.");
					if (!event.suppressLocaleWarning) checkLocaleVersion(localeVersion);
					if (sendStartModulesEvent) {
            
						sendStartModulesEvent = false;
						sendStartAllModulesEvent();
					}				
				}						
			}
			
			public function sendStartAllModulesEvent():void{
				LogUtil.debug("Sending start all modules event");
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(new ModuleLoadEvent(ModuleLoadEvent.START_ALL_MODULES));	
			}
			
			private function fullScreenHandler(evt:FullScreenEvent):void {
				dispState = stage.displayState + " (fullScreen=" + evt.fullScreen.toString() + ")";
				if (evt.fullScreen) {
					LogUtil.debug("Switching to full screen");
					/* Do something specific here if we switched to full screen mode. */
				
				} else {
					LogUtil.debug("Switching to normal screen");
					/* Do something specific here if we switched to normal mode. */
				}
			}			
			
			private function openLogWindow():void {
				if (logWindow == null){
					logWindow = new LogWindow();
					logWindow.logs = logs;
				}
				mdiCanvas.windowManager.add(logWindow);
				mdiCanvas.windowManager.absPos(logWindow, 50, 50);
				logWindow.width = mdiCanvas.width - 100;
				logWindow.height = mdiCanvas.height - 100;
			}
			
			public function openShortcutHelpWindow(e:Event = null):void{
				if (scWindow == null) {
					scWindow = new ShortcutHelpWindow();
				}
				mdiCanvas.windowManager.add(scWindow);
				mdiCanvas.windowManager.absPos(scWindow, mdiCanvas.width/2 - 150, mdiCanvas.height/2 - 150);
				scWindow.width = 300;
				scWindow.height = 300;
				scWindow.focusCategories();
			}
			
			private function toggleFullScreen():void{
	   			LogUtil.debug("Toggling fullscreen");
	   			try {
					switch (stage.displayState) {
						case StageDisplayState.FULL_SCREEN:
							LogUtil.debug("full screen mode");
							// If already in full screen mode, switch to normal mode.
							stage.displayState = StageDisplayState.NORMAL;
							break;
						default:
							LogUtil.debug("Normal screen mode");
							// If not in full screen mode, switch to full screen mode.
							stage.displayState = StageDisplayState.FULL_SCREEN;
							break;
					}
				} catch (err:SecurityError) {
					// ignore
				}
	   		}	
	   		
	   		private function handleOpenWindowEvent(event:OpenWindowEvent):void {
          isTunneling = BBB.initConnectionManager().isTunnelling;
	   			var window:IBbbModuleWindow = event.window;
	   			mdiCanvas.addWindow(window);
	   		}
	   		
	   		private function handleCloseWindowEvent(event:CloseWindowEvent):void {
	   			var window:IBbbModuleWindow = event.window;
				  mdiCanvas.removeWindow(window);
	   		}
	   		
	   		private function resetLayout():void{
	   			mdiCanvas.resetWindowLayout();
	   		}
	   		
	   		private function addComponentToCanvas(e:AddUIComponentToMainCanvas):void{
	   			mdiCanvas.addChild(e.component);
	   		}
	   		
	   		public function checkLocaleVersion(localeVersion:String):void {	   			
	   			Alert.okLabel ="OK";
				var version:String = "old-locales";
				version = ResourceUtil.getInstance().getString('bbb.mainshell.locale.version');
				LogUtil.debug("Locale from config=" + localeVersion + ", from locale file=" + version);

				if ((version == "old-locales") || (version == "") || (version == null)) {
					wrongLocaleVersion();
				} else {
					if (version != localeVersion) wrongLocaleVersion();
				}	   			
	   		}

			private function showMicSettings(event:BBBEvent):void {
				var micSettings:MicSettings = MicSettings(PopUpManager.createPopUp(mdiCanvas, MicSettings, true));				
				var point1:Point = new Point();
				// Calculate position of TitleWindow in Application's coordinates. 
				point1.x = width/2;
				point1.y = height/2;                
				micSettings.x = point1.x - (micSettings.width/2);
				micSettings.y = point1.y - (micSettings.height/2);	
			}
			
      private function openVideoPreviewWindow(event:BBBEvent):void {
        var camSettings:CameraDisplaySettings = CameraDisplaySettings(PopUpManager.createPopUp(mdiCanvas, CameraDisplaySettings, true));		
        camSettings.resolutions = (event.payload.resolutions as String).split(",");
        camSettings.publishInClient = event.payload.publishInClient;
        
        var point1:Point = new Point();
        // Calculate position of TitleWindow in Application's coordinates. 
        point1.x = width/2;
        point1.y = height/2;                
        camSettings.x = point1.x - (camSettings.width/2);
        camSettings.y = point1.y - (camSettings.height/2);	
      }
      
	   	private function wrongLocaleVersion():void {
				var localeWindow:OldLocaleWarnWindow = OldLocaleWarnWindow(PopUpManager.createPopUp(mdiCanvas, OldLocaleWarnWindow, false));

				var point1:Point = new Point();
	        	// Calculate position of TitleWindow in Application's coordinates. 
				point1.x = width/2;
				point1.y = height/2;              
				localeWindow.x = point1.x - (localeWindow.width/2);
				localeWindow.y = point1.y - (localeWindow.height/2);	
      }
			
			private function handleLogout(e:ConnectionFailedEvent):void {
				if (layoutOptions.showLogoutWindow) {
					if (logoutWindow != null) return;
					logoutWindow = LoggedOutWindow(PopUpManager.createPopUp( mdiCanvas, LoggedOutWindow, false));
					
					var point1:Point = new Point();
					// Calculate position of TitleWindow in Application's coordinates. 
					point1.x = width/2;
					point1.y = height/2;                 
					logoutWindow.x = point1.x - (logoutWindow.width/2);
					logoutWindow.y = point1.y - (logoutWindow.height/2);
					
					if (e is ConnectionFailedEvent) logoutWindow.setReason((e as ConnectionFailedEvent).type);
					else logoutWindow.setReason("You have logged out of the conference");	
					
					mdiCanvas.removeAllWindows(); 				
				} else {
					mdiCanvas.removeAllWindows();
					var pageHost:String = FlexGlobals.topLevelApplication.url.split("/")[0];
					var pageURL:String = FlexGlobals.topLevelApplication.url.split("/")[2];
					var request:URLRequest = new URLRequest(pageHost + "//" + pageURL + "/bigbluebutton/api/signOut");
					var urlLoader:URLLoader = new URLLoader();
					urlLoader.addEventListener(Event.COMPLETE, handleLogoutComplete);	
					urlLoader.load(request);
				}				
			}
			
			private function handleLogoutComplete(e:Event):void {	
				var request:URLRequest = new URLRequest(BBB.initUserConfigManager().getLogoutUrl());
				LogUtil.debug("Logging out to: " + BBB.initUserConfigManager().getLogoutUrl());
				navigateToURL(request, '_self');			
			}
			
			private function attemptReconnect(e:ConnectionFailedEvent):void{
				/*if (connectionLostWindow != null) return;
				connectionLostWindow = ConnectionLostWindow(PopUpManager.createPopUp( mdiCanvas, ConnectionLostWindow, true));
				connectionLostWindow.x = mdiCanvas.width/2 - connectionLostWindow.width/2;
				connectionLostWindow.y = mdiCanvas.height/2 - connectionLostWindow.height/2;*/
				
				//Temporary fix
				handleLogout(e);
			}
			
			private function handleRecordStatusEvent(evt:RecordStatusEvent):void {
				Alert.show(evt.status, evt.module);
			}
						
			private function handleAddToolbarComponent(event:ToolbarButtonEvent):void {
				if (event.location == ToolbarButtonEvent.BOTTOM_TOOLBAR) {
					addedBtns.addChild(event.button as UIComponent);
//					realignButtons();
				}
			}
			
			private function handleRemoveToolbarComponent(event:ToolbarButtonEvent):void {
				if (addedBtns.contains(event.button as UIComponent))
					addedBtns.removeChild(event.button as UIComponent);
			}

			private var networkStatsWindow:NetworkStatsWindow = new NetworkStatsWindow();

			private function openNetworkStatsWindow(e:Event = null):void {
				/*var btnPosition:Point = new Point(btnNetwork.x, btnNetwork.y);
				var btnPositionOnGlobal:Point = btnNetwork.localToGlobal(btnPosition);
				var windowPosition:Point = networkStatsWindow.globalToLocal(btnPositionOnGlobal);
				
				windowPosition.x += btnNetwork.width + 10;
				windowPosition.y -= networkStatsWindow.height - 10;

				networkStatsWindow.x = windowPosition.x;
				networkStatsWindow.y = windowPosition.y;*/

				networkStatsWindow.appear();
			}
			
			private function closeNetworkStatsWindow(e:Event = null):void {
				networkStatsWindow.disappear();
			}

		]]>
	</mx:Script>
			
	<views:MainToolbar id="toolbar" dock="true" width="100%" height="{toolbarHeight}" visible="{showToolbarOpt}" verticalAlign="middle" toolbarOptions="{layoutOptions}" paddingTop="{toolbarPaddingTop}"/>
	<views:MainCanvas id="mdiCanvas" horizontalScrollPolicy="off" verticalScrollPolicy="off" effectsLib="{flexlib.mdi.effects.effectsLib.MDIVistaEffects}" width="100%" height="100%">
		<views:LoadingBar id="progressBar" x="{this.width/2 - progressBar.width/2}" y="{this.height/2 - progressBar.height/2}" width="{this.width/2}" />
		<views:BrandingLogo x="{this.width - 300}" y="{this.height - 300}" />
	</views:MainCanvas>	
	
	<mx:ControlBar width="100%" height="{footerHeight}" paddingTop="0">		
	  <mx:Label text="--JoeWeb.it {ResourceUtil.getInstance().getString('bbb.mainshell.copyrightLabel2',[appVersion])}"++Joeweb.it id="copyrightLabel2"/>
	 	<mx:Spacer width="20"/>
		<mx:Spacer width="100%"/> 
    <mx:Label text="{isTunneling ? '[Tunnelling]' : ''}" id="isTunnellingLbl"/>
		<mx:Button width="20" height="20" visible="{layoutOptions.showLogButton}" toolTip="{ResourceUtil.getInstance().getString('bbb.mainshell.logBtn.toolTip')}" id="logBtn" icon="{logs_icon}" click="openLogWindow()" />
		<!-- mx:Button width="20" height="20" visible="{layoutOptions.showResetLayout}" toolTip="{ResourceUtil.getInstance().getString('bbb.mainshell.resetLayoutBtn.toolTip')}" id="btnResetLayout" icon="{reset_layout_icon}" click="resetLayout()" /-->
		<mx:Button id="btnNetwork" icon="{statsIcon}" width="20" height="20" mouseOver="openNetworkStatsWindow()" mouseOut="closeNetworkStatsWindow()" />		
		<mx:HBox id="addedBtns" />
	</mx:ControlBar>
</mx:VBox>
