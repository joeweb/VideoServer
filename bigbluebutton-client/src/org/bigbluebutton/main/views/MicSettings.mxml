<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"  
                width="600" height="350" creationComplete="initDefaultMic()" styleName="micSettingsWindowStyle"
                showCloseButton="false" close="onCancelClicked()" keyDown="handleKeyDown(event)">

	<mx:Script>
		<![CDATA[
			import flash.system.Security;
			import flash.ui.Keyboard;
		
			import mx.events.CloseEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Embed(source="assets/audio-test.mp3")]
			[Bindable] private var soundClass:Class;
			private var sound:Sound = new soundClass() as Sound;			
			private var soundChannel:SoundChannel;

			private var timer:Timer;
			private var mic:Microphone;
			private var playingAudio:Boolean = false;
			private var images:Images = new Images();
			[Bindable] private var cancelIcon:Class = images.cancel;
			
			private function initDefaultMic():void {
				mic = Microphone.getMicrophone();
				
				if (mic != null) {
					if (mic.muted) {
						// user has disallowed access to the mic
						mic.addEventListener(StatusEvent.STATUS, micStatusEventHandler);
						Security.showSettings();
					} else {
						// user has allowed access to the mic
						mic.setLoopBack(true);
					}
				} else {
					LogUtil.warn("Microphone is used by another application.");
				}
				timer = new Timer(100);
				timer.addEventListener(TimerEvent.TIMER, updateMicLevel);
				timer.start();	
			}
			
			// Added by Chad to enable closing the window without clicking the X
			private function handleKeyDown(event:KeyboardEvent):void {
				if (event.charCode == Keyboard.ESCAPE) {
                    this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
                }
			}
			
			private function micStatusEventHandler(event:StatusEvent):void {					
				switch(event.code) {
					case "Microphone.Muted":						
						LogUtil.warn("Access to microphone has been denied.");
						break;
					case "Microphone.Unmuted":
						mic.setLoopBack(true);
						LogUtil.debug("Access to the microphone has been allowed.");
						break;
					default:
						LogUtil.debug("unknown micStatusHandler event: " + event);
				}
			}			
			
			private function updateMicLevel(e:TimerEvent):void{
				if (mic != null) {
					mic1Label.text = mic.name;
					micLevel1.setProgress(mic.activityLevel, 100);					
				}
			}
						
			public function playButtonClickHandler():void {
				if (playButton.selected) {
					soundChannel = sound.play();  
					playingAudio = true;
				} else {
					soundChannel.stop();
					playButton.label = ResourceUtil.getInstance().getString('bbb.micSettings.playSound');
					playingAudio = false;
				}	                     
			}
						
			private function showMicSettingsPanel():void {
				Security.showSettings(SecurityPanel.MICROPHONE);
			}
			
			private function onJoinClicked():void {
				cleanUp();
				var joinEvent:BBBEvent = new BBBEvent("JOIN_VOICE_CONFERENCE_EVENT");
				joinEvent.payload['useMicrophone'] = true;
				dispatchEvent(joinEvent);
				PopUpManager.removePopUp(this);
			}	

			private function onCancelClicked():void {
				cleanUp();
				var event:BBBEvent = new BBBEvent("MIC_SETTINGS_CLOSED");
				event.payload['clicked'] = "cancel";
				dispatchEvent(event);
				PopUpManager.removePopUp(this);
			}

			private function cleanUp():void {
				timer.stop();
				mic.setLoopBack(false);
				mic = null;
				if (playingAudio) soundChannel.stop();				
			}
			
			private var DEFAULT_HELP_URL:String = "http://www.bigbluebutton.org/content/videos";
			private function onHelpButtonClicked():void {
				navigateToURL(new URLRequest(DEFAULT_HELP_URL));
			}
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%"  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<mx:HBox width="100%">
      <mx:Label text="Audio Settings" styleName="micSettingsWindowTitleStyle"/>
			<mx:Spacer width="50%"/>
		</mx:HBox>
		<mx:HBox width="100%">
      <mx:VBox width="100%">
        <mx:Spacer height="5"/>
        <mx:HBox width="100%">
          <mx:Label id="testSpeakersLabel" text="Test Speakers" styleName="micSettingsWindowTestSpeakersLabelStyle"/>
          <mx:Spacer width="100%"/>
          <mx:LinkButton fontSize="10" label="" 
                         styleName="micSettingsWindowHelpButtonStyle"
                         click="onHelpButtonClicked()"/>          
        </mx:HBox>
        <mx:HRule width="100%"/>
      </mx:VBox>   
		</mx:HBox>
		<mx:HBox width="100%">
				<mx:Text width="100%" text="{ResourceUtil.getInstance().getString('bbb.micSettings.hearFromHeadset')}"
                 styleName="micSettingsWindowHearFromHeadsetLabelStyle"/>
				<mx:Button id="playButton" label="{ResourceUtil.getInstance().getString('bbb.micSettings.playSound')}" 
						   click="playButtonClickHandler()" toggle="true" styleName="micSettingsWindowPlaySoundButtonStyle"/>		
		</mx:HBox>
		<mx:HBox width="100%">
      <mx:VBox width="100%">
        <mx:Spacer height="5"/>
        <mx:HBox width="100%">
          <mx:Label id="testMicLabel" text="Test Microphone" styleName="micSettingsWindowTestMicrophoneLabelStyle"/>
          <mx:Spacer width="100%"/>
          <mx:LinkButton fontSize="10" label="" 
                         styleName="micSettingsWindowHelpButtonStyle"
                         click="onHelpButtonClicked()"/>          
        </mx:HBox>
        <mx:HRule width="100%"/>
      </mx:VBox> 
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:VBox width="70%">
				<mx:Text width="100%" text="{ResourceUtil.getInstance().getString('bbb.micSettings.speakIntoMic')}"
                 styleName="micSettingsWindowSpeakIntoMicLabelStyle" />
        <mx:HBox width="100%">
          <mx:Text id="mic1Label" text="Microphone Name" styleName="micSettingsWindowMicNameLabelStyle"/>
          <mx:ProgressBar id="micLevel1" minimum="0" maximum="100"  
                          labelPlacement="right" label="" styleName="micSettingsWindowMicProgressBarStyle"
                          direction="right" mode="manual" visible="true" width="120"/>	          
        </mx:HBox>			
				<mx:Button id="settingBtn" label="{ResourceUtil.getInstance().getString('bbb.micSettings.changeMic')}" 
                   styleName="micSettingsWindowChangeMicButtonStyle"
                   click="showMicSettingsPanel()"/>				
			</mx:VBox>
		</mx:HBox>	
		<mx:HBox width="100%">
			<mx:Spacer width="80%"/>
			<mx:Button id="okBtn" label="{ResourceUtil.getInstance().getString('bbb.micSettings.join')}" 
                 styleName="micSettingsWindowJoinButtonStyle"
                 click="onJoinClicked()"/>
			<mx:Spacer width="10"/>
      <mx:Button id="cancelBtn" label="Cancel" 
                 styleName="micSettingsWindowCancelButtonStyle"
                 click="onCancelClicked()"/>
		</mx:HBox>
	</mx:VBox>		
</mx:TitleWindow>
