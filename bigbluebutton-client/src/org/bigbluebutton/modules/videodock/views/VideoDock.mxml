<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<MDIWindow xmlns="flexlib.mdi.containers.*" 
		   xmlns:mx="http://www.adobe.com/2006/mxml" 
		   creationComplete="onCreationComplete()" 
		   implements="org.bigbluebutton.common.IBbbModuleWindow"
		   title="{ResourceUtil.getInstance().getString('bbb.videodock.title')}"
		   xmlns:mate="http://mate.asfusion.com/" styleNameFocus="videoDockStyleFocus"
		   layout="absolute" visible="false" styleNameNoFocus="videoDockStyleNoFocus"
		   horizontalAlign="center" 
		   verticalAlign="middle"
		   resize="onChildAdd()">
	
	<mx:Script>
		<![CDATA[
      //backgroundImage="{backgroundImage}"
      import com.asfusion.mate.events.Dispatcher;
      
      import mx.events.ChildExistenceChangedEvent;
      
      import org.bigbluebutton.common.Images;
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.common.events.CloseWindowEvent;
      import org.bigbluebutton.common.events.DragWindowEvent;
      import org.bigbluebutton.common.events.OpenWindowEvent;
      import org.bigbluebutton.core.BBB;
      import org.bigbluebutton.core.events.ConnectAppEvent;
      import org.bigbluebutton.main.model.users.Conference;
      import org.bigbluebutton.main.views.MainCanvas;
      import org.bigbluebutton.modules.videoconf.business.VideoWindowItf;
      import org.bigbluebutton.modules.videoconf.events.OpenVideoWindowEvent;
      import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var childrenDimension:Dictionary = new Dictionary();
			private var borderColor:String;
			private var minChildAspectRatio:Number;
			// the mutable array is used to change the order of the dock children
			private var mutableChildrenArray:Array = new Array();
			
			private var _prioritizeWindow:Boolean = false;
			private var priorityWindow:VideoWindowItf = null;
			// the priority video will fit a portion of the dock that is represented by this weight
			// bigger the weight, bigger will be the window and less space the other windows will have
			private var priorityWindowWeight:Number = 2/3;
			
			private var options:DockOptions = new DockOptions();
			
      private var images:Images = new Images();
      
      [Bindable]
      private var backgroundImage:Class = images.video_dock_bg;
      
			private function onCreationComplete():void {				
				this.showCloseButton = false;		
				this.showControls = options.showControls;
        
				this.minWidth = options.width;
				this.minHeight = options.height;
				this.maxWidth = this.parent.width;
				this.maxHeight = this.parent.height;
				
				this.width = this.minWidth;
				this.height = this.minHeight;
				
				addEventListener(ChildExistenceChangedEvent.CHILD_ADD, onChildAdd);			
				addEventListener(ChildExistenceChangedEvent.CHILD_REMOVE, onChildRemove);
				
				if (options.maximize) this.maximize();
        
        var gDispatcher:Dispatcher = new Dispatcher();
        var evt:ConnectAppEvent = new ConnectAppEvent(ConnectAppEvent.CONNECT_VIDEO_APP);
        gDispatcher.dispatchEvent(evt);
			}
			
			/**
			 *	The windows docked are organized in a MxN grid equally divided.
			 *	Then, the aspect ratio of the cells is the equal of the window
			 *	with lower aspect ratio. For example, if there are two windows, 
			 *	one 4x3 and one 16x9, the aspect ratio of the grid cells will be
			 *	4x3, to better fit all the windows. The aspect ratio of the grid
			 *	cells is updated every time a window is added or removed. 
			 */
			private function updateMinAspectRatio(children:Array):void {
				minChildAspectRatio = 0;
				for each(var window:VideoWindowItf in children) {
				    const windowAspectRatio:Number = (window.width - VideoWindowItf.PADDING_HORIZONTAL) / (window.height - VideoWindowItf.PADDING_VERTICAL);
				    if (minChildAspectRatio == 0 || windowAspectRatio < minChildAspectRatio)
				        minChildAspectRatio = windowAspectRatio;				        
				}
				LogUtil.debug("Using aspect ratio grid = " + minChildAspectRatio);
			}
			
			private function onChildAdd(e:ChildExistenceChangedEvent = null):void {
				if (e != null) {
					mutableChildrenArray.push(getChildren().pop());
					updateMinAspectRatio(mutableChildrenArray);
				}
				
				if (options.oneAlwaysBigger && !_prioritizeWindow)
					prioritizeAnyWindow();
				
				updateChildrenDimensions(mutableChildrenArray);
			}
			
			private function onChildRemove(e:ChildExistenceChangedEvent = null):void {
				var index:int = mutableChildrenArray.indexOf(e.relatedObject);
				if (index != -1)
					mutableChildrenArray.splice(index, 1);
				
				if (e.relatedObject == priorityWindow || mutableChildrenArray.length <= 1)
					deprioritizeWindow();
					
				updateMinAspectRatio(mutableChildrenArray);
				updateChildrenDimensions(mutableChildrenArray);
			}
			
			public function getPrefferedPosition():String {
				//return MainCanvas.BOTTOM_RIGHT;
				return options.position;
			}
					
			private function saveWindowDimensions(window:MDIWindow):void {
				var dimensions:Object = {width:window.width, height:window.height};
				childrenDimension[window] = dimensions;
			}
			
			private function restoreWindowDimensions(window:MDIWindow):void {
				window.width = childrenDimension[window].width;
				window.height = childrenDimension[window].height;
			}
			
			private function repositionWindow(window:MDIWindow):void {
				// \TODO reposition the window correctly between the windows
				// one idea is to use a "shadow" window
				// setChildIndex(window, ?);
			}
			
			private function isVideoWindow(window:Object):Boolean {
				return (getQualifiedSuperclassName(window) == "org.bigbluebutton.modules.videoconf.business::VideoWindowItf")
			}
			
			private function onCloseWindow(e:CloseWindowEvent):void {
				// it should not just undock the window, it should close the window forever
				if (isVideoWindow(e.window) && this.contains(e.window as VideoWindowItf)) {
          this.removeChild(e.window as VideoWindowItf);
        }
					
			}
			
			private function onOpenWindow(e:OpenVideoWindowEvent):void {
				if (isVideoWindow(e.window) && options.autoDock) {
          addVideoChild(e.window as VideoWindowItf);
        }					
			}
			
			private function addVideoChild(window:VideoWindowItf):void {
				if (this.contains(window))
					return;
				
				/**
				 * Check if the window is visible. Right now, a publisher window can be made invisible by setting
				 * a param in config.xml. If the window is invisible, don't add it. We'll have to do this properly
				 * when we refactor to remove the window UIs. We should just be adding Videos here instead of windows.
				 * But for now, this is good enough.
				 */
				if (! window.visible) return;
				
				saveWindowDimensions(window);
				
				window.minimizeBtn.visible = false;
				window.maximizeRestoreBtn.visible = false;
				window.resizable = false;
        window.draggable = false;

				window.addEventListener(MouseEvent.CLICK, onWindowClick);

				var e:CloseWindowEvent = new CloseWindowEvent();
				e.window = window;
				dispatchEvent(e);
				
				this.addChild(window);
			}
			
			override public function close(event:MouseEvent = null):void {
				removeAllChildren();
				super.close(event);
			}
			
			private function updateChildrenDimensions(children:Array):void {
				if (children.length == 0) return;
				
				const horizontalGap:int = getStyle("horizontalGap");
				const verticalGap:int = getStyle("verticalGap");
				
				var availableWidth:int = this.width - this.borderMetrics.left - this.borderMetrics.right;
				var availableHeight:int = this.height - this.borderMetrics.top - this.borderMetrics.bottom;
				
				var borderTop:int = 0;
				var borderLeft:int = 0;
				
				if (_prioritizeWindow) {
					// the first window will be prioritized
					priorityWindow = children[0];
					
					// if the aspect ratio of the dock is smaller than the window (like 1:1 against 16:9)
					// the window will be on top of the dock 
					if (availableWidth / availableHeight < priorityWindow.width / priorityWindow.height
							|| options.layout == DockOptions.LAYOUT_HANGOUT) {
						priorityWindow.width = availableWidth;
						priorityWindow.updateHeight();
						if (priorityWindow.height > availableHeight * priorityWindowWeight) {
							priorityWindow.height = availableHeight * priorityWindowWeight;
							priorityWindow.updateWidth();
						}
						priorityWindow.y = 0;
						priorityWindow.x = (availableWidth - priorityWindow.width) / 2;
						availableHeight -= (priorityWindow.height + verticalGap);
						borderTop += priorityWindow.height + verticalGap;
					} else {
						// the window will be on left of the dock 
						priorityWindow.height = availableHeight;
						priorityWindow.updateWidth();
						if (priorityWindow.width > availableWidth * priorityWindowWeight) {
							priorityWindow.width = availableWidth * priorityWindowWeight;
							priorityWindow.updateHeight();
						}
						priorityWindow.y = (availableHeight - priorityWindow.height) / 2;
						priorityWindow.x = 0;
						availableWidth -= (priorityWindow.width + horizontalGap);
						borderLeft += priorityWindow.width + horizontalGap;
					}
				}
				
				var childWidth:int = 0;
				var childHeight:int = 0;
				var nRows:Number = 0;
				var nColumns:Number = 0;
				
				// we would like to maximize the window size
				for (var rows:Number = 1; rows <= children.length - (_prioritizeWindow? 1: 0); ++rows) {
					var columns:Number = Math.ceil((children.length - (_prioritizeWindow? 1: 0))/ rows);
					var maxWidth:int = Math.floor((availableWidth - horizontalGap * (columns - 1)) / columns) - VideoWindowItf.PADDING_HORIZONTAL;
					var maxHeight:int = Math.floor((availableHeight - verticalGap * (rows - 1)) / rows) - VideoWindowItf.PADDING_VERTICAL;
					
					// the possible dimensions shouldn't be less or equal 0 (it could happen with many videos)
					if (maxWidth <= 0 || maxHeight <=0)
						continue;
					
					var width:int = maxWidth;
					var height:int = maxHeight;
					
					if (maxWidth / maxHeight > minChildAspectRatio)
						width = Math.floor(maxHeight * minChildAspectRatio);
					else
						height = Math.floor(maxWidth / minChildAspectRatio);
					
					if (width > childWidth) {
						childWidth = width;
						childHeight = height;
						nRows = rows;
						nColumns = columns;
					}
				}                        
				
				childWidth += VideoWindowItf.PADDING_HORIZONTAL;
				childHeight += VideoWindowItf.PADDING_VERTICAL;

				const horizontalBorder:int = availableWidth - nColumns * childWidth - (nColumns - 1) * horizontalGap;
				const verticalBorder:int = availableHeight - nRows * childHeight - (nRows - 1) * verticalGap;
				// this couple of lines will center the priority window on the available space for it
				if (_prioritizeWindow) {
					if (priorityWindow.x == 0) {
						priorityWindow.x = horizontalBorder / 3;
						borderTop += verticalBorder / 2;
						borderLeft += horizontalBorder * (2 / 3);
					} else {
						priorityWindow.y = verticalBorder / 3;  
						borderTop += verticalBorder * (2 / 3);
						borderLeft += horizontalBorder / 2;
					}
				} else {
					// if there's no priority window, the border will be only around the little windows
					borderTop += verticalBorder / 2;
					borderLeft += horizontalBorder / 2;
				}
									
				for (var childIndex:int = (_prioritizeWindow? 1: 0); childIndex < children.length; ++childIndex) {
					var window:VideoWindowItf = children[childIndex];
					const wWidth:int = childWidth;
					const wHeight:int = childHeight;
					
					window.width = wWidth;
					window.updateHeight();
					
					if (window.height > wHeight) {
						window.height = wHeight;
						window.updateWidth();
					}
					
					// the extra padding is used to center the windows with higher aspect ratio
					const horizontalExtraPadding:int = (wWidth - window.width) / 2;
					const verticalExtraPadding:int = (wHeight - window.height) / 2;
					
					var row:int = (childIndex - (_prioritizeWindow? 1: 0)) / nColumns;
					var column:int = (childIndex - (_prioritizeWindow? 1: 0)) % nColumns;
					
					window.y = row * (wHeight + verticalGap) + borderTop + verticalExtraPadding;;
					window.x = column * (wWidth + horizontalGap) + borderLeft + horizontalExtraPadding;
				} 
			}
			
			protected function onWindowClick(event:MouseEvent = null):void {
				prioritizeWindow(event.currentTarget);
			}
			
			private function prioritizeWindow(window:Object):void {
				if (mutableChildrenArray.length <= 1
						|| options.layout == DockOptions.LAYOUT_NONE)
					return;
				
				if (window == priorityWindow && !options.oneAlwaysBigger) {
					deprioritizeWindow();
				} else {
					var index:int = mutableChildrenArray.indexOf(window);
					if (index != -1) {
						mutableChildrenArray[index] = mutableChildrenArray[0];
						mutableChildrenArray[0] = window;
						_prioritizeWindow = true;
					}
				}
				updateChildrenDimensions(mutableChildrenArray);
			}
			
			private function prioritizeAnyWindow():void {
				if (mutableChildrenArray.length > 0)
					prioritizeWindow(mutableChildrenArray[0]);
			}
			
			private function deprioritizeWindow():void {
				if (options.oneAlwaysBigger && mutableChildrenArray.length > 1)
					prioritizeAnyWindow();
				else {
					_prioritizeWindow = false;
				}
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString('bbb.videodock.title');
			}			
						
		]]>
	</mx:Script>
	
	<mate:Listener type="{OpenVideoWindowEvent.OPEN_VIDEO_WINDOW_EVENT}" method="onOpenWindow" />
	<mate:Listener type="{CloseWindowEvent.CLOSE_WINDOW_EVENT}" method="onCloseWindow" />
</MDIWindow>