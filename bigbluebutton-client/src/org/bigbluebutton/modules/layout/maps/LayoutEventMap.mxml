<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
	<mx:Script>
		<![CDATA[
      import mx.events.FlexEvent;
      
      import org.bigbluebutton.core.EventConstants;
      import org.bigbluebutton.main.events.MadePresenterEvent;
      import org.bigbluebutton.modules.layout.events.ConnectionEvent;
      import org.bigbluebutton.modules.layout.events.LayoutEvent;
      import org.bigbluebutton.modules.layout.events.RedefineLayoutEvent;
      import org.bigbluebutton.modules.layout.events.StartLayoutModuleEvent;
      import org.bigbluebutton.modules.layout.events.UpdateLayoutEvent;
      import org.bigbluebutton.modules.layout.events.ViewInitializedEvent;
      import org.bigbluebutton.modules.layout.managers.LayoutManager;
      import org.bigbluebutton.modules.layout.services.LayoutService;
		]]>
	</mx:Script>

	<EventHandlers type="{FlexEvent.PREINITIALIZE}">
		<ObjectBuilder generator="{LayoutEventMapDelegate}" constructorArguments="{scope.dispatcher}" />
		<ObjectBuilder generator="{LayoutManager}" />
	</EventHandlers>
	
	<EventHandlers type="{StartLayoutModuleEvent.START_LAYOUT_MODULE_EVENT}">        
		<ObjectBuilder generator="{LayoutService}" constructorArguments="{event.attributes}" />
   		<MethodInvoker generator="{LayoutEventMapDelegate}" method="startModule" arguments="{event.attributes}" />
   		<MethodInvoker generator="{LayoutManager}" method="loadServerLayouts" arguments="{event.attributes.layoutConfig}" />
    </EventHandlers>
    
	<EventHandlers type="{ViewInitializedEvent.VIEW_INITIALIZED_EVENT}">
   		<MethodInvoker generator="{LayoutManager}" method="setCanvas" arguments="{event.canvas}" />
   		<MethodInvoker generator="{LayoutService}" method="join" />
    </EventHandlers>
    
    <EventHandlers type="{LayoutEvent.STOP_LAYOUT_MODULE_EVENT}">
   		<MethodInvoker generator="{LayoutService}" method="leave" />
   		<MethodInvoker generator="{LayoutEventMapDelegate}" method="stopModule" />
    </EventHandlers>
        
    <EventHandlers type="{ConnectionEvent.CONNECT_EVENT}">
   		<MethodInvoker generator="{LayoutService}" method="initLayout" arguments="{event.success}" />
    </EventHandlers>
    
    <EventHandlers type="{LayoutEvent.APPLY_DEFAULT_LAYOUT_EVENT}">
   		<MethodInvoker generator="{LayoutManager}" method="applyDefaultLayout" />
    </EventHandlers>
    
    <EventHandlers type="{LayoutEvent.LOCK_LAYOUT_EVENT}">
   		<MethodInvoker generator="{LayoutManager}" method="lockLayout" />
    </EventHandlers>

  <EventHandlers type="{EventConstants.LOCK_LAYOUT_REQ}">
    <MethodInvoker generator="{LayoutManager}" method="lockLayout"/>
  </EventHandlers>
  
    <EventHandlers type="{LayoutEvent.UNLOCK_LAYOUT_EVENT}">
   		<MethodInvoker generator="{LayoutService}" method="unlockLayout" />
    </EventHandlers>

  <EventHandlers type="{EventConstants.UNLOCK_LAYOUT_REQ}">
    <MethodInvoker generator="{LayoutService}" method="unlockLayout"/>
  </EventHandlers>
  
    <EventHandlers type="{UpdateLayoutEvent.UPDATE_LAYOUT_EVENT}">
   		<MethodInvoker generator="{LayoutService}" method="lockLayout" arguments="{event.layout}" />
    </EventHandlers>
    
    <EventHandlers type="{RedefineLayoutEvent.REDEFINE_LAYOUT_EVENT}">
   		<MethodInvoker generator="{LayoutManager}" method="redefineLayout" arguments="{event}" />
    </EventHandlers>
	
    <EventHandlers type="{LayoutEvent.SAVE_LAYOUTS_EVENT}">
   		<MethodInvoker generator="{LayoutManager}" method="saveLayoutsToFile" />
    </EventHandlers>
	
    <EventHandlers type="{LayoutEvent.LOAD_LAYOUTS_EVENT}">
   		<MethodInvoker generator="{LayoutManager}" method="loadLayoutsFromFile" />
    </EventHandlers>
	
    <EventHandlers type="{LayoutEvent.ADD_CURRENT_LAYOUT_EVENT}">
   		<MethodInvoker generator="{LayoutManager}" method="addCurrentLayoutToList" />
    </EventHandlers>
  
  <EventHandlers type="{EventConstants.SWITCH_LAYOUT_REQ}">
    <MethodInvoker generator="{LayoutManager}" method="switchToLayout" arguments="{event.message.layoutName}"/>
  </EventHandlers>
	
    <EventHandlers type="{LayoutEvent.REMOTE_LOCK_LAYOUT_EVENT}">
   		<MethodInvoker generator="{LayoutManager}" method="remoteLockLayout" />
    </EventHandlers>
	
    <EventHandlers type="{LayoutEvent.REMOTE_UNLOCK_LAYOUT_EVENT}">
   		<MethodInvoker generator="{LayoutManager}" method="remoteUnlockLayout" />
    </EventHandlers>
	
    <EventHandlers type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}">
   		<MethodInvoker generator="{LayoutManager}" method="presenterChanged" />
    </EventHandlers>

    <EventHandlers type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}">
   		<MethodInvoker generator="{LayoutManager}" method="presenterChanged" />
    </EventHandlers>

    <!-- EventHandlers type="{FlexEvent.CREATION_COMPLETE}">        
   		<MethodInvoker generator="{LayoutManager}" method="printSomething" arguments="{FlexEvent.CREATION_COMPLETE}" />
    </EventHandlers>
	
    <EventHandlers type="{FlexEvent.CONTENT_CREATION_COMPLETE}">        
   		<MethodInvoker generator="{LayoutManager}" method="printSomething" arguments="{FlexEvent.CONTENT_CREATION_COMPLETE}" />
    </EventHandlers>
	
    <EventHandlers type="{FlexEvent.INIT_COMPLETE}">        
   		<MethodInvoker generator="{LayoutManager}" method="printSomething" arguments="{FlexEvent.INIT_COMPLETE}" />
    </EventHandlers-->
	
</EventMap>