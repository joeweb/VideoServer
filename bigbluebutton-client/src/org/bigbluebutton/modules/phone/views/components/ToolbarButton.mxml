<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:mate="http://mate.asfusion.com/"
	icon="{phoneIcon}" click="startPhone()"
	mouseOver = "mouseOverHandler(event)"
	mouseOut = "mouseOutHandler(event)"
	toolTip="{ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start')}"
	implements="org.bigbluebutton.common.IBbbToolbarComponent">
	
	<mate:Listener type="{BBBEvent.JOIN_VOICE_CONFERENCE}" method="handleBBBJoinConferenceEvent"/>
	<mate:Listener type="MIC_SETTINGS_CLOSED" method="handleMicSettingsClosedEvent"/>

	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.views.MainToolbar;
			import org.bigbluebutton.modules.phone.PhoneOptions;
			import org.bigbluebutton.modules.phone.events.CallConnectedEvent;
			import org.bigbluebutton.modules.phone.events.CallDisconnectedEvent;
			import org.bigbluebutton.modules.phone.views.assets.Images;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var images:Images = new Images();
			private var dispatcher:Dispatcher = new Dispatcher();
			private var mic:Microphone;
			
			public const DEFAULT_STATE:Number = 0;
			public const ACTIVE_STATE:Number = 1;
			private var _currentState:Number = DEFAULT_STATE;
			
			[Bindable] public var phoneIcon:Class = images.headsetDefaultIcon;
			
			private function startPhone():void {
				// Disable the button right away to prevent the user from clicking
				// multiple times.
				this.enabled = false;
			
				if (this.selected) {	
					var vxml:XML = BBB.getConfigForModule("PhoneModule");
					var phoneOptions:PhoneOptions = new PhoneOptions();
					if (vxml != null) {
						phoneOptions.showButton = (vxml.@showButton.toString().toUpperCase() == "TRUE") ? true : false;
						phoneOptions.autoJoin = (vxml.@autoJoin.toString().toUpperCase() == "TRUE") ? true : false;
						phoneOptions.skipCheck = (vxml.@skipCheck.toString().toUpperCase() == "TRUE") ? true : false;
					}
          
          var joinEvent:BBBEvent;
          
					if (phoneOptions.skipCheck || noMicrophone()) {
						// need to figure out if the user has a mic and if they do if it's muted ask for access
						mic = Microphone.getMicrophone();
						
						if (mic == null) {
							/*
							 * If the user had no mic, let her join but she'll just be listening.	
							 * We should indicate a warning that the user is joining without mic
							 * so that he will know that others won't be able to hear him.
							*/
							joinEvent = new BBBEvent("JOIN_VOICE_CONFERENCE_EVENT");
							joinEvent.payload['useMicrophone'] = false;
							dispatcher.dispatchEvent(joinEvent);
						} else if (mic.muted) {
  							// user has disallowed access to the mic
  							mic.addEventListener(StatusEvent.STATUS, micStatusEventHandler);
  							Security.showSettings();
						} else {
							// user has allowed access to the mic already
						  joinEvent = new BBBEvent("JOIN_VOICE_CONFERENCE_EVENT");
							joinEvent.payload['useMicrophone'] = true;
							dispatcher.dispatchEvent(joinEvent);
					  }						
					} else {
						dispatcher.dispatchEvent(new BBBEvent("SHOW_MIC_SETTINGS"));
					}
				} else {
					var leaveEvent:BBBEvent = new BBBEvent("LEAVE_VOICE_CONFERENCE_EVENT");
					leaveEvent.payload["userRequested"] = true;
					dispatcher.dispatchEvent(leaveEvent);
					userJoinedConference(false);
				}
			}
			
			private function micStatusEventHandler(event:StatusEvent):void {				
        var joinEvent:BBBEvent;
				switch(event.code) {
					case "Microphone.Muted":						
						LogUtil.warn("Access to microphone has been denied.");
						joinEvent = new BBBEvent("JOIN_VOICE_CONFERENCE_EVENT");
						joinEvent.payload['useMicrophone'] = false;
						dispatcher.dispatchEvent(joinEvent);
						break;
					case "Microphone.Unmuted":
						LogUtil.debug("Access to the microphone has been allowed.");
						joinEvent = new BBBEvent("JOIN_VOICE_CONFERENCE_EVENT");
						joinEvent.payload['useMicrophone'] = true;
						dispatcher.dispatchEvent(joinEvent);
						break;
					default:
						LogUtil.debug("unknown micStatusHandler event: " + event);
				}
			}			
			
			private function mouseOverHandler(event:MouseEvent):void {
				if(_currentState == ACTIVE_STATE)
					phoneIcon = images.headsetInactiveIcon;
				else
					phoneIcon = images.headsetActiveIcon;			
			}

			private function mouseOutHandler(event:MouseEvent):void {
				if(_currentState == ACTIVE_STATE)
					phoneIcon = images.headsetActiveIcon;
				else
					phoneIcon = images.headsetDefaultIcon;			
			}

			public function userJoinedConference(joined: Boolean):void {
				

				if (joined) {
					this.selected = true;
					this.enabled = true;
					_currentState = ACTIVE_STATE;
					phoneIcon = images.headsetActiveIcon;
					this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.stop');
				} else {
					this.selected = false;
					this.enabled = true;
					_currentState = DEFAULT_STATE;
					phoneIcon = images.headsetDefaultIcon;
					this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
				}

				
			}
			
			private function noMicrophone():Boolean {
				return ((Microphone.getMicrophone() == null) || (Microphone.names.length == 0) 
					|| ((Microphone.names.length == 1) && (Microphone.names[0] == "Unknown Microphone")));
			}
						
			private function handleCallDisconnectedEvent(event:CallDisconnectedEvent):void {
				this.selected = false;
				this.enabled = true;
				_currentState = DEFAULT_STATE;
				phoneIcon = images.headsetDefaultIcon;
				this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
			}
			
			private function handleMicSettingsClosedEvent(event:BBBEvent):void {
				userJoinedConference(false);
			}
			
			private function handleBBBJoinConferenceEvent(event:BBBEvent):void {
				var joinEvent:BBBEvent = new BBBEvent("JOIN_VOICE_CONFERENCE_EVENT");
				joinEvent.payload['useMicrophone'] = false;
				dispatcher.dispatchEvent(joinEvent);
			}
			
			//For whatever reason the tooltip does not update when localization is changed dynamically. Overrideing it here
			override protected function resourcesChanged():void{
				this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
			}
			
			public function getAlignment():String{
				return MainToolbar.ALIGN_LEFT;
			}
		]]>
	</mx:Script>
</mx:Button>
