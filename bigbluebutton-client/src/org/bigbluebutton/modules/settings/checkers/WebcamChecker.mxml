<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="180" height="180" 
		 paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10"
		 visible="false">
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.managers.PopUpManager;
			
			import org.bigbluebutton.modules.settings.connectors.VideoConnector;
			import org.bigbluebutton.modules.settings.uihelpers.WarningEvent;
			import org.bigbluebutton.modules.settings.util.PersistUserPreferences;
			import org.bigbluebutton.modules.settings.util.Requirements;
			
			private var video:Video;
			private var camera:Camera;
			
			[Bindable] private var camWidth:Number = 160;
			[Bindable] private var camHeight:Number = 120;
			private var quality:Number = 0;
			
			private var videoConnector:VideoConnector; 
			private var ns:NetStream;
						
			public function init():void{
				this.visible = true;
				this.videoConnector = new VideoConnector(onNetStatus);
				
				checkIfNoCamera();
				var isMac:Boolean = checkIfMacCamera();
				if (isMac) checkIfGoogleTalkPluginInstalled();				
			}
			
			public function saveCurrentWebcam():void{
				PersistUserPreferences.saveWebcamPreference(Camera.names[cmbCameraSelector.selectedIndex]);
			}
			
			private function checkIfNoCamera():void{
				if (Camera.names.length == 0 || Camera.names[0] == ""){
					var e:WarningEvent = new WarningEvent(WarningEvent.WARNING_EVENT);
					e.warningLabel = "No Camera Detected";
					e.warningText = "We did not detect a webcam connected to your system. If you do have a webcam connected, make sure it is installed and working " +
									"properly, and is not currently in use by another program.";
					dispatchEvent(e);
				}
			}
			
			private function checkIfMacCamera():Boolean{
				for (var i:int = 0; i<Camera.names.length; i++){
					if (Camera.names[i] == "USB Video Class Video" || Camera.names[i] == "Built-in iSight") {
						/**
						 * Set as default for Macs
						 */
						cmbCameraSelector.selectedIndex = i;
						return true;
					}
				}
				return false;
			}
			
			private function checkIfGoogleTalkPluginInstalled():void{
				for (var i:int = 0; i<Camera.names.length; i++){
					if (Camera.names[i] == "Google Camera Adapter 1" || Camera.names[i] == "Google Camera Adapter 0") {
						showGoogleAdapterError();
						break;
					}
				}
			}
			
			private function showCamera():void{
				camera = Camera.getCamera(cmbCameraSelector.selectedIndex.toString());
				if (camera == null) return;
								
				camera.setKeyFrameInterval(5);
				camera.setMode(camWidth,camHeight,15);
				camera.setQuality(0,quality);
				
				//The following few lines will just show the camera locally captured. What we want to do is stream it
				/*video = new Video(camWidth, camHeight);
				//Next two lines may seem redundant but they're not. Do not delete. They force the video to proper width & height
				video.width = camWidth;
				video.height = camHeight;
				video.attachCamera(camera);
				videoHolder.addChild(video);*/
				
				videoConnector.connectVideo(camera, onNetStatus);
				saveCurrentWebcam();

			}
			
			public function onNetStatus(e:NetStatusEvent):void{
				trace("WebcamChecker::onNetStatus - " + e.info.code);
				switch(e.info.code){
					case VideoConnector.CONNECT_SUCCESS:
						showCamera();
						break;
					case VideoConnector.NETSTREAM_PUBLISH:
						startVideo();
						break;
					case VideoConnector.CONNECT_FAILED:
						showConnectionError();
						break;
					case VideoConnector.CONNECT_REJECTED:
						//showConnectionError();
						break;
					case VideoConnector.CONNECT_CLOSED:
						showConnectionError();
						break
					default:
						break;
				}
			}
			
			private function startVideo():void{				
				ns = new NetStream(videoConnector.connection);
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				
				video = new Video(camWidth, camHeight);
				video.width = camWidth;
				video.height = camHeight;
				video.attachNetStream(ns);
				videoHolder.addChild(video);
				ns.play(videoConnector.streamName);	
			}
			
			private function showGoogleAdapterError():void{
				var e:WarningEvent = new WarningEvent(WarningEvent.WARNING_EVENT);
				e.warningLabel = "Google Camera Adapter Error";
				e.warningText = googleAdapterError();
				dispatchEvent(e);
			}
			
			private function showConnectionError():void{
				var e:WarningEvent = new WarningEvent(WarningEvent.WARNING_EVENT);
				e.warningLabel = "Connection Error";
				e.warningText = connectionError(Requirements.bbb_video_url);
				dispatchEvent(e);
			}
			
			private static function googleAdapterError():String{
				return "It seems like you have Google Voice and Video plugin installed. " +
						"This plugin interferes with normal functioning of the Webcams on Macs with certain Flash versions. \n\n" +
						"To fix this problem: \n" +
						"- If you are using Google Chrome, try using Safari instead. \n" +
						"Or, you can uninstall the Google Voice and Video plugin. To do this: \n" +
						"- Go to /Library/Application Support/Google/ \n" +
						"- You will see 'GoogleVoiceAndVideoUninstaller.app'. \n" +
						"- Close all browser windows and then open this app.";
			}
			
			private static function connectionError(serverUrl:String):String{
				return "The connection failed while trying to check video connectivity with the " +
						"server at " + serverUrl + ". Please contact your server administrator.";
			}
			
			public function stop():void{
				if (ns != null) ns.close();
			}

		]]>
	</mx:Script>
	
	<mx:UIComponent id="videoHolder" width="{camWidth}" height="{camHeight}" />
	<mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%">
		<mx:ComboBox id="cmbCameraSelector" dataProvider="{Camera.names}" y="250" width="150" 
					 change="showCamera()" textAlign="left"/>
	</mx:HBox>
</mx:VBox>
