<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<viewVid:VideoWindowItf  
  xmlns:viewVid="org.bigbluebutton.modules.videoconf.business.*"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	creationComplete="onCreationComplete()"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	xmlns:mate="http://mate.asfusion.com/"
  styleNameFocus="videoViewStyleFocus"
  styleNameNoFocus="videoViewStyleNoFocus"
  horizontalScrollPolicy="off"
  verticalScrollPolicy="off"
	resize="onResize()"
	layout="absolute">
	
  <mate:Listener type="{BBBEvent.USER_VOICE_MUTED}" method="handleUserVoiceMutedEvent" />
  <mate:Listener type="{EventConstants.USER_TALKING}" method="handleUserTalkingEvent" />
  <mate:Listener type="{SwitchedPresenterEvent.SWITCHED_PRESENTER}" method="handleNewRoleEvent" />
  <mate:Listener type="{CloseAllWindowsEvent.CLOSE_ALL_WINDOWS}" method="closeWindow" />
  
	<mx:Script>
		<![CDATA[
      import com.asfusion.mate.events.Dispatcher;
      
      import flexlib.mdi.events.MDIWindowEvent;
      
      import mx.core.UIComponent;
      
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.common.Role;
      import org.bigbluebutton.common.events.CloseWindowEvent;
      import org.bigbluebutton.core.EventConstants;
      import org.bigbluebutton.core.events.CoreEvent;
      import org.bigbluebutton.main.events.BBBEvent;
      import org.bigbluebutton.main.events.StoppedViewingWebcamEvent;
      import org.bigbluebutton.main.events.SwitchedPresenterEvent;
      import org.bigbluebutton.main.views.MainCanvas;
      import org.bigbluebutton.modules.videoconf.business.TalkingButtonOverlay;
      import org.bigbluebutton.modules.videoconf.events.CloseAllWindowsEvent;
      import org.bigbluebutton.modules.videoconf.model.VideoConfOptions;
      
			private var ns:NetStream;			
			private var globalDispatcher:Dispatcher;
      
			[Bindable]
			public var videoOptions:VideoConfOptions;
			
      private var windowType:String = "VideoWindowType";
      
      override public function getWindowType():String {
        return windowType;
      }
      
			private function onCreationComplete():void{
				_videoHolder = new UIComponent();
				_videoHolder.addChild(_video);
				this.addChild(_videoHolder);
				
				addEventListener(MDIWindowEvent.RESIZE_START, onResizeStart);
				addEventListener(MDIWindowEvent.RESIZE_END, onResizeEnd);
				addEventListener(MDIWindowEvent.CLOSE, onCloseEvent);

				addEventListener(MouseEvent.MOUSE_OVER, showButtons);
				addEventListener(MouseEvent.MOUSE_OUT, hideButtons);
				addEventListener(MouseEvent.DOUBLE_CLICK, onDoubleClick);
				
				createButtons();
        addControlButtons();
        
				globalDispatcher = new Dispatcher();

				this.minWidth = _minWidth;
				this.minHeight = _minHeight;
				maximizeRestoreBtn.visible = true;
				this.resizable = true;
				
				/**
				 *  At this point, the function startVideo has been called, and 
				 *   the video has the exactly dimensions of the original stream.
				 *  It's needed to call onResize() to fit the video window in the
				 *  main canvas in case that the video dimensions are larger than
				 *  the parent window. 
				 */
				onResize();				
				
				if (videoOptions.viewerWindowMaxed)
					this.maximize();
				
				this.showCloseButton = videoOptions.showCloseButton;
			}
			
      private function handleNewRoleEvent(event:SwitchedPresenterEvent):void {
        switchRole(event.amIPresenter)
      }
      
      private function handleUserVoiceMutedEvent(event:BBBEvent):void {
        if (event.payload.userID ==  userID) {
          userMuted(event.payload.muted);
        }
      }
      
      private var _closing:Boolean = false;
      
			private function onCloseEvent(event:MDIWindowEvent = null):void {
				LogUtil.debug("ViewWindow closing " + streamName);
        if (!_closing) {
          _closing = true;
          var stopEvent:StoppedViewingWebcamEvent = new StoppedViewingWebcamEvent();
          stopEvent.webcamUserID = userID;
          globalDispatcher.dispatchEvent(stopEvent);          
        }

			}
			
      private function handleUserTalkingEvent(event:CoreEvent):void {
        if (event.message.userID ==  userID) {
          if (event.message.talking) {
            notTalkingEffect.end();
            talkingEffect.play([this]);            
          } else {
            talkingEffect.end();
            notTalkingEffect.play([this]);
          }
        }
      }
      
    
			public function startVideo(connection:NetConnection, stream:String):void{
				ns = new NetStream(connection);
				ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				
				var res:Array = getVideoResolution(stream);
				if (res == null) // error
					return;
				_video = new Video(Number(res[0]), Number(res[1]));
				_video.width = originalWidth = Number(res[0]);
				_video.height = originalHeight = Number(res[1]);
				setAspectRatio(Number(res[0]), Number(res[1])); 
				_video.attachNetStream(ns);


				if (videoOptions.smoothVideo) {
					trace("Smoothing video.")
					_video.smoothing = true;
				} 
				
				if (videoOptions.applyConvolutionFilter) {
					var filter:ConvolutionFilter = new flash.filters.ConvolutionFilter();
					filter.matrixX = 3;
					filter.matrixY = 3;
					trace("Applying convolution filter =[" + videoOptions.convolutionFilter + "]");					
					filter.matrix = videoOptions.convolutionFilter;
					filter.bias =  videoOptions.filterBias;
					filter.divisor = videoOptions.filterDivisor;
					_video.filters = [filter];					
				}
						
				ns.play(stream);
				this.streamName = stream;
				
				this.width = _video.width + paddingHorizontal;
				this.height = _video.height + paddingVertical;	
			}
						
			private function onAsyncError(e:AsyncErrorEvent):void{
				LogUtil.debug("VideoWindow::asyncerror " + e.toString());
			}
			
			public function onMetaData(info:Object):void{
				trace("metadata: width=" + info.width + " height=" + info.height);
				_video.width = info.width;
				_video.height = info.height;
				setAspectRatio(info.width, info.height);
				onResize();
			}
						
			private function onNetStatus(e:NetStatusEvent):void{
				switch(e.info.code){
					case "NetStream.Publish.Start":
						LogUtil.debug("NetStream.Publish.Start for broadcast stream " + streamName);
						break;
					case "NetStream.Play.UnpublishNotify":
						ns.close();
						this.close();
						// shouldn't call onCloseEvent() here because of the viewer cam icon
						super.close();
						break;
					case "NetStream.Play.Start":
						LogUtil.debug("Netstatus: " + e.info.code);
						globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.VIDEO_STARTED));						
						break;
					case "NetStream.Play.FileStructureInvalid":
						LogUtil.debug("The MP4's file structure is invalid.");
						break;
					case "NetStream.Play.NoSupportedTrackFound":
						LogUtil.debug("The MP4 doesn't contain any supported tracks");
						break;
				}
			}
			
			override public function close(event:MouseEvent=null):void{
				ns.close();
				onCloseEvent();
				super.close(event);
			}		
			
			private function closeWindow(e:CloseAllWindowsEvent):void{
				this.close();
			}
												
		]]>
	</mx:Script>
  
  <mx:Glow id="talkingEffect" duration="500" alphaFrom="1.0" alphaTo="0.3"
           blurXFrom="0.0" blurXTo="10.0" blurYFrom="0.0" blurYTo="10.0" color="0x4A931D"/>
  <mx:Glow id="notTalkingEffect" duration="500" alphaFrom="0.3" alphaTo="1.0"
           blurXFrom="10.0" blurXTo="0.0" blurYFrom="10.0" blurYTo="0.0" color="0x4A931D"/>
	

</viewVid:VideoWindowItf>
