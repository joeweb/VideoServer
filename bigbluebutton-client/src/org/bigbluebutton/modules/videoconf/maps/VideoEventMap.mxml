<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
	<mx:Script>
		<![CDATA[
      import org.bigbluebutton.core.events.ConnectAppEvent;
      import org.bigbluebutton.main.events.BBBEvent;
      import org.bigbluebutton.main.events.MadePresenterEvent;
      import org.bigbluebutton.main.events.StoppedViewingWebcamEvent;
      import org.bigbluebutton.main.events.UserJoinedEvent;
      import org.bigbluebutton.main.events.UserLeftEvent;
      import org.bigbluebutton.main.model.users.events.StreamStartedEvent;
      import org.bigbluebutton.modules.videoconf.events.ClosePublishWindowEvent;
      import org.bigbluebutton.modules.videoconf.events.ConnectedEvent;
      import org.bigbluebutton.modules.videoconf.events.ShareCameraRequestEvent;
      import org.bigbluebutton.modules.videoconf.events.StartBroadcastEvent;
      import org.bigbluebutton.modules.videoconf.events.StopBroadcastEvent;
      import org.bigbluebutton.modules.videoconf.events.VideoModuleStartEvent;
      import org.bigbluebutton.modules.videoconf.events.VideoModuleStopEvent;
      import org.bigbluebutton.modules.viewers.events.ViewCameraEvent;		
		]]>
	</mx:Script>
	
  <EventHandlers type="{VideoModuleStartEvent.START}">
    <ObjectBuilder generator="{VideoEventMapDelegate}" cache="global" constructorArguments="{scope.dispatcher}"/>
    <MethodInvoker generator="{VideoEventMapDelegate}" method="start"/>
  </EventHandlers>
 
  <EventHandlers type="{VideoModuleStopEvent.STOP}">
    <MethodInvoker generator="{VideoEventMapDelegate}" method="stop"/>
  </EventHandlers>
  
  <EventHandlers type="{BBBEvent.CAMERA_SETTING}" >
    <MethodInvoker generator="{VideoEventMapDelegate}" method="handleCameraSetting" arguments="{event}"/>
  </EventHandlers>
  
  <EventHandlers type="{ConnectAppEvent.CONNECT_VIDEO_APP}">
    <MethodInvoker generator="{VideoEventMapDelegate}" method="connectToVideoApp" />
  </EventHandlers>
  
	<EventHandlers type="{ShareCameraRequestEvent.SHARE_CAMERA_REQUEST}">
    <MethodInvoker generator="{VideoEventMapDelegate}" method="handleShareCameraRequestEvent" arguments="{event}"/>
	</EventHandlers>

	<EventHandlers type="{StartBroadcastEvent.START_BROADCAST}" >
    <MethodInvoker generator="{VideoEventMapDelegate}" method="startPublishing" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{StopBroadcastEvent.STOP_BROADCASTING}" >
    <MethodInvoker generator="{VideoEventMapDelegate}" method="stopPublishing" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{StreamStartedEvent.STREAM_STARTED}">
    <ObjectBuilder generator="{VideoEventMapDelegate}" cache="global" constructorArguments="{scope.dispatcher}"/>
    <MethodInvoker generator="{VideoEventMapDelegate}" method="viewCamera" arguments="{[event.userID, event.stream, event.user]}" />
	</EventHandlers>
	
	<EventHandlers type="{ViewCameraEvent.VIEW_CAMERA_EVENT}">
    <MethodInvoker generator="{VideoEventMapDelegate}" method="viewCamera" arguments="{[event.userID, event.stream, event.viewedName]}" />
	</EventHandlers>

  <EventHandlers type="{UserJoinedEvent.JOINED}">
    <ObjectBuilder generator="{VideoEventMapDelegate}" cache="global" constructorArguments="{scope.dispatcher}"/>
    <MethodInvoker generator="{VideoEventMapDelegate}" method="handleUserJoinedEvent" arguments="{event}" />
  </EventHandlers>

  <EventHandlers type="{UserLeftEvent.LEFT}">
    <ObjectBuilder generator="{VideoEventMapDelegate}" cache="global" constructorArguments="{scope.dispatcher}"/>
    <MethodInvoker generator="{VideoEventMapDelegate}" method="handleUserLeftEvent" arguments="{event}" />
  </EventHandlers>
  
	<EventHandlers type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" >
    <ObjectBuilder generator="{VideoEventMapDelegate}" cache="global" constructorArguments="{scope.dispatcher}"/>
    <MethodInvoker generator="{VideoEventMapDelegate}" method="switchToPresenter" arguments="{event}"/>	
	</EventHandlers>
	
	<EventHandlers type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}">
    <ObjectBuilder generator="{VideoEventMapDelegate}" cache="global" constructorArguments="{scope.dispatcher}"/>
    <MethodInvoker generator="{VideoEventMapDelegate}" method="switchToViewer" arguments="{event}"/>
	</EventHandlers>

  <EventHandlers type="{ConnectedEvent.VIDEO_CONNECTED}">
    <MethodInvoker generator="{VideoEventMapDelegate}" method="connectedToVideoApp" />
  </EventHandlers>
 
  <EventHandlers type="{ClosePublishWindowEvent.CLOSE_PUBLISH_WINDOW}">
    <MethodInvoker generator="{VideoEventMapDelegate}" method="handleClosePublishWindowEvent" arguments="{event}"/>
  </EventHandlers>
  
  <EventHandlers type="{StoppedViewingWebcamEvent.STOPPED_VIEWING_WEBCAM}">
    <MethodInvoker generator="{VideoEventMapDelegate}" method="handleStoppedViewingWebcamEvent"  arguments="{event}"/>
  </EventHandlers>
  
  <!-- ~~~~~~~~~~~~~~~~~~    INJECTORS     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  
</EventMap>
