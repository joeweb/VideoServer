<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:mate="http://mate.asfusion.com/"
    creationComplete="onCreationComplete()"
    xmlns:flexlib="http://code.google.com/p/flexlib/"
    width="100%" height="100%" xmlns:containers="flexlib.containers.*"
    verticalScrollPolicy="off">

  <mate:Listener type="{PrivateChatMessageEvent.PRIVATE_CHAT_MESSAGE_EVENT}" method="handlePrivateChatMessageEvent"/>
  <mate:Listener type="{PublicChatMessageEvent.PUBLIC_CHAT_MESSAGE_EVENT}" method="handlePublicChatMessageEvent"/>
  <mate:Listener type="{EventConstants.START_PRIVATE_CHAT}" method="handleStartPrivateChatMessageEvent"/>
  
	<mx:Script>
		<![CDATA[
      import be.boulevart.google.ajaxapi.translation.GoogleTranslation;
      import be.boulevart.google.events.GoogleApiEvent;
      
      import com.asfusion.mate.events.Dispatcher;
      
      import flash.events.FocusEvent;
      import flash.external.ExternalInterface;
      import flash.media.Sound;
      import flash.media.SoundChannel;
      import flash.utils.Timer;
      
      import flexlib.controls.tabBarClasses.SuperTab;
      import flexlib.controls.textClasses.StringBoundaries;
      import flexlib.events.SuperTabEvent;
      import flexlib.mdi.containers.MDIWindow;
      
      import mx.collections.ArrayCollection;
      import mx.containers.ControlBar;
      import mx.controls.Button;
      import mx.core.Container;
      import mx.core.UIComponent;
      import mx.events.IndexChangedEvent;
      
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.core.BBB;
      import org.bigbluebutton.core.EventConstants;
      import org.bigbluebutton.core.UsersUtil;
      import org.bigbluebutton.core.events.CoreEvent;
      import org.bigbluebutton.core.managers.UserManager;
      import org.bigbluebutton.main.events.BBBEvent;
      import org.bigbluebutton.main.events.ShortcutEvent;
      import org.bigbluebutton.main.model.users.BBBUser;
      import org.bigbluebutton.modules.chat.ChatUtil;
      import org.bigbluebutton.modules.chat.events.ChatOptionsEvent;
      import org.bigbluebutton.modules.chat.events.PrivateChatMessageEvent;
      import org.bigbluebutton.modules.chat.events.PublicChatMessageEvent;
      import org.bigbluebutton.modules.chat.events.SendPrivateChatMessageEvent;
      import org.bigbluebutton.modules.chat.events.SendPublicChatMessageEvent;
      import org.bigbluebutton.modules.chat.model.ChatOptions;
      import org.bigbluebutton.modules.chat.model.business.UserVO;
      import org.bigbluebutton.modules.chat.vo.ChatMessageVO;
      import org.bigbluebutton.util.i18n.ResourceUtil;			
					
			private static const PUBLIC_CHAT_USERID:String = 'public_chat_userid';
			private static const PUBLIC_CHAT_USERNAME:String = ResourceUtil.getInstance().getString("bbb.chat.publicChatUsername");
			private static const TAB_BOX_ID:String = '+';
			private var tabBox:AddChatTabBox;			
			private var focus:Boolean = true;			
			private var globalDispatcher:Dispatcher = new Dispatcher();			
			private var autoTranslation:Boolean=false;
			
      [Bindable] 
      public var chatOptions:ChatOptions;
									
			private static const PUBLIC_TAB_NEW:String = ResourceUtil.getInstance().getString("bbb.accessibility.chat.chatView.publicTabNew");
            
			private var publicWaiting:Boolean = false;
			private var privateWaiting:ArrayCollection = new ArrayCollection();
			private var publicFocus:Boolean = false;
			private var privateFocus:Boolean = false;
			private var timerInterval:int = 10; // How many seconds you want the timer to wait between chat notifications
      private var notificationTimer:Timer = new Timer(timerInterval * 1000);
			
			[Embed(source="../sounds/publicSound.mp3")] 
      private var publicSoundClass:Class;
      
			[Embed(source="../sounds/privateSound.mp3")] 
      private var privateSoundClass:Class;
			
      private var publicSound:Sound = new publicSoundClass() as Sound;
			private var privateSound:Sound = new privateSoundClass() as Sound;		
			
			private function onCreationComplete():void{
				// Start the timer for screen-reader-friendly chat notifications
				notificationTimer.addEventListener(TimerEvent.TIMER, checkNotifications);
				notificationTimer.start();
				
				openChatBoxFor(PUBLIC_CHAT_USERID, true);
        makePublicChatUncloseable();
        
        if (chatOptions.privateEnabled) {
          createAddTabBox();
          makeAddPrivateChatUncloseable();
        }
				
				
				addEventListener(SuperTabEvent.TAB_CLOSE, onUserClosedTab);
        
				systemManager.stage.addEventListener(Event.MOUSE_LEAVE, mouseLeave);
				systemManager.stage.addEventListener(Event.ACTIVATE, activate);
				systemManager.stage.addEventListener(Event.DEACTIVATE, deactivate);
				
			}       
			
      private function handlePublicChatMessageEvent(event:PublicChatMessageEvent):void {
        notifyUserOfNewMessage(PUBLIC_CHAT_USERID);
      }
      
      private function handlePrivateChatMessageEvent(event:PrivateChatMessageEvent):void {
        // This message is from me. Ignore as a chatbox has already been created for this
        // private chat and that chatbox will handle this message.
        if (UsersUtil.isMe(event.message.fromUserID)) return;
        
        // I received a new private chat. Open up a new chatbox and forward the message
        // to the chatbox. Succeeding messages will be handled by that chatbox.
        if (! userHasChatBox(event.message.fromUserID)) {
          // Open a private chat tab.
          openChatBoxFor(event.message.fromUserID, false);
          // Forward the message to the private chat
          getChatBoxForUser(event.message.fromUserID).handleFirstPrivateMessage(event);          
        }
        
        // See if the chatbox is not in focus and notify user about the message.
        notifyUserOfNewMessage(event.message.fromUserID);
      }
      
      private function notifyUserOfNewMessage(userID:String):void {
        if (! isChatBoxCurrentlySelected(userID)) {
          notifyParticipantOfUnreadMessageFrom(userID);
        }
      }
      		
			private function mouseLeave(event:Event):void{
				this.focus = false;
			}
			
			private function activate(event:Event):void{
				ExternalInterface.call("clearblink");
				this.focus = true;
			}
			
			private function deactivate(event:Event):void{
				this.focus = false;
			}
					
			private function makePublicChatUncloseable():void {
				// See definition of callLater on Adobe Flash doc.
				callLater(calledOnTheNextScreenRefreshToMakePublicChatUncloseable);
			}
			
      private function makeAddPrivateChatUncloseable():void {
        // See definition of callLater on Adobe Flash doc.
        callLater(calledOnTheNextScreenRefreshToMakeTabUncloseable);        
      }      
      
      private function calledOnTheNextScreenRefreshToMakeTabUncloseable():void {
        chatTabs.setClosePolicyForTab(chatTabs.getChildIndex(tabBox), SuperTab.CLOSE_NEVER);
      }
      
			private function calledOnTheNextScreenRefreshToMakePublicChatUncloseable():void {
				var chatBox:ChatBox = getChatBoxForUser(PUBLIC_CHAT_USERID);
				var chatIndex:int = getTabIndexFor(chatBox);
				chatTabs.setClosePolicyForTab(chatIndex, SuperTab.CLOSE_NEVER);								
			}
											
			private function isChatBoxCurrentlySelected(id:String):Boolean {
				if (chatTabs.getChildByName(id) == chatTabs.selectedChild){
					return true;
				}
				return false;
			}
								
			private function notifyParticipantOfUnreadMessageFrom(userid:String):void {
				var chatBox:ChatBox = getChatBoxForUser(userid);
				var tabIndex:int = getTabIndexFor(chatBox);
				var tab:Button = chatTabs.getTabAt(tabIndex);
				tab.setStyle("fillColors", new Array(0xFFAE00, 0xD3800A));
				tab.setStyle("fillAlphas", new Array(1.0, 0.8));
			}
			
			private function getTabIndexFor(chatBox:ChatBox):int {
				return chatTabs.getChildIndex(chatBox);
			}
			
			private function onTabNavChange():void{
				var tab:Button = chatTabs.getTabAt(chatTabs.selectedIndex);
				tab.setStyle("fillColors", new Array(0xFFFFFF, 0xCCCCCC));
        var chatBox:IChatTab = chatTabs.getChildAt(chatTabs.selectedIndex) as IChatTab;
        chatBox.focusToTextMessageArea();
			}
								
      private function userHasChatBox(userID:String):Boolean {
        var chatBox:ChatBox = chatTabs.getChildByName(userID) as ChatBox;
        if (chatBox != null) return true;
        return false;
      }
      
      private function getChatBoxForUser(userID:String):ChatBox {
        return chatTabs.getChildByName(userID) as ChatBox;
      }
      
      private function handleStartPrivateChatMessageEvent(event:CoreEvent):void {
        var userID:String = event.message.chatWith;
        openChatBoxFor(userID);
        var chatBox:ChatBox = getChatBoxForUser(userID);
        var tabIndex:int = getTabIndexFor(chatBox);
        chatTabs.selectedIndex = tabIndex;
      }
      
			public function openChatBoxFor(chatWithUserID:String, publicChat:Boolean=false):void {
				var chatBox:ChatBox;
				
				if (userHasChatBox(chatWithUserID)) {
					chatBox = getChatBoxForUser(chatWithUserID);
				} else {
					chatBox = createChatBoxFor(chatWithUserID, publicChat);
					chatBox.chatWithUserID = chatWithUserID;
				}				
			}
			
			private function createChatBoxFor(chatWithUserID:String, publicChat:Boolean=false):ChatBox {				
				var chatBox:ChatBox = new ChatBox();
				chatBox.id = chatWithUserID;
        chatBox.name = chatWithUserID;
        
        if (publicChat) {
          chatBox.label = PUBLIC_CHAT_USERNAME
          chatBox.publicChat = true;
        } else {
          chatBox.publicChat = false;
          chatBox.label = UsersUtil.getUserName(chatWithUserID);
        }
				
				chatBox.chatWithUsername = UsersUtil.getUserName(chatWithUserID);
				
				if (chatTabs.numChildren >= 2) { 
					chatTabs.addChildAt(chatBox, chatTabs.numChildren - 1);
				} else {
					chatTabs.addChild(chatBox);
				}
         
				return chatBox;
			}
			     
			private function createAddTabBox():AddChatTabBox {
				tabBox = new AddChatTabBox();
				tabBox.chatView = this;
				tabBox.id = TAB_BOX_ID;
				tabBox.label = TAB_BOX_ID;
				tabBox.name = TAB_BOX_ID;
				tabBox.chatOptions = chatOptions;
				chatTabs.addChild(tabBox);
				
				return tabBox;
			}
			
			
			// Receive private chat messages
//			private function handlePrivateChatMessageEvent(event:PrivateChatMessageEvent):void {
//				if (Accessibility.active){
//					privateNotification(event);
//				}
//			}
			
			// Activates an audio alert for screen-reader users on public message reception
			private function publicNotification():void {
				publicWaiting = true;
				chatTabs.getChildByName(PUBLIC_CHAT_USERID).addEventListener(FocusEvent.FOCUS_IN, publicChatFocus);
				chatTabs.getChildByName(PUBLIC_CHAT_USERID).addEventListener(FocusEvent.FOCUS_OUT, publicChatUnfocus);
			}
			
			// Activates an audio alert for screen-reader users on private message reception
			private function privateNotification(event:PrivateChatMessageEvent):void{
				if (! UsersUtil.isMe(event.message.fromUserID)) {
					var newItem:Boolean = true;
					// Check if there is already a notification of private messages from that user
					if (privateWaiting.length){
						for (var i:int = 0; i < privateWaiting.length; i++){
							// Compare userID of incoming message to userIDs of unsent notifications
							if (event.message.fromUserID == privateWaiting.getItemAt(i).message.fromUserID){
								newItem = false;
							}
						}
					}
					if (newItem){
						// Add a private chat event (with all associated information) to the privateWaiting array
						privateWaiting.addItem(event);
						chatTabs.getChildByName(event.message.fromUserID).addEventListener(FocusEvent.FOCUS_IN, privateChatFocus);
						chatTabs.getChildByName(event.message.fromUserID).addEventListener(FocusEvent.FOCUS_OUT, privateChatUnfocus);
					}
				}
			}
			
			public function publicChatFocus(event:FocusEvent):void{
				publicFocus = true;
				if (publicWaiting) {
          ExternalInterface.call("clearblink");
        }
					
				publicWaiting = false;
			}
			
			public function privateChatFocus(event:FocusEvent):void{
				if (event.target.name == "chatMessagesList"){
					var removed:Boolean = false;
					
					for (var messageCounter:int = 0; messageCounter < event.target.parent.exposeNumMessages(); messageCounter ++){
						removed = removePrivateSender(event.target.parent.exposeSenderID(messageCounter));
						if (removed) {
							ExternalInterface.call("clearblink");
							messageCounter = event.target.parent.exposeNumMessages() + 1;
						}
					}
					
					if (privateWaiting.length == 1){
						privateFocus = true;
					} else {
						privateFocus == false;
					}
				}
			}
			
			public function publicChatUnfocus(event:FocusEvent):void {
				publicFocus = false;
			}
			
			public function privateChatUnfocus(event:FocusEvent):void {
				// If you unfocus from private chat into public or options, privateFocus will be false
				// Even if you focus to a different private chat, you cannot focus all of them.
				privateFocus = false;
			}
			
			// Listens to the notification timer, and checks if there are messages waiting
			private function checkNotifications(event:TimerEvent):void {
				if (Accessibility.active) {
					var debugDate:Date = new Date();
					var message:String = "";
					var playSoundClip:Boolean = useSoundClip();
					if (publicWaiting && !publicFocus) {
						if (playSoundClip) {
	            			publicSound.play();
            } else{
	            			message += PUBLIC_TAB_NEW; 
						}
					}
					
					if (privateWaiting.length && !privateFocus) {
						if (playSoundClip){
							privateSound.play();
						}
						else {
							var names:String = "";
							for (var i:int = 0; i < privateWaiting.length; i++){
								names += " " + privateWaiting.getItemAt(i).message.chatobj.username;
								if (i < privateWaiting.length - 1)
									names += ",";
							}
							message += ResourceUtil.getInstance().getString("bbb.accessibility.chat.chatView.privateTabNew", [names]);
						}
					}
					if (playSoundClip == false){
						ExternalInterface.call("addAlert", message);
					}				
				}
			}
			
			// Determine whether audio chat message notificiations are to be handled by the screen reader or by an audio sound clip
			private function useSoundClip():Boolean {
				var rvalue:Boolean = false;
				var browserName:String = ExternalInterface.call("determineBrowser");
				if (browserName == "Chrome" || browserName == "Opera"){
					// If the user is in a non-compliant browser, the ARIA alerts will not be picked up by the screen reader, and thus we need to use the sound clip
					rvalue = true;
				}		
				return rvalue;
			}
			
			// Returns an array of userIDs. The userIDs refer to users who have sent this user private messages which have not been read.
			public function getPrivateSenders():ArrayCollection {
				var privateSenders:ArrayCollection = new ArrayCollection;
				if (privateWaiting.length){
					for (var i:int = 0; i < privateWaiting.length; i++){
						privateSenders.addItem(privateWaiting.getItemAt(i).message.chatobj.userid);
					}
				}
				return privateSenders;
			}
			
			// This is slightly mis-named; it removes the notification of this sender sending a private message for notification purposes
			private function removePrivateSender(senderID:String):Boolean{
				var success:Boolean = false;
				if (privateWaiting.length){
					for (var i:int = 0; i < privateWaiting.length; i++){
						if (senderID == privateWaiting.getItemAt(i).message.chatobj.userid){
							privateWaiting.removeItemAt(i);
							success = true;
							i = privateWaiting.length;
						}
					}
				}
				return success;
			}
						
			private function focusPreviousChatTab(e:ShortcutEvent):void{
				if (chatTabs.selectedIndex > 0){
					chatTabs.selectedIndex--;
				}
				else{
					chatTabs.selectedIndex = chatTabs.numChildren - 1;
				}				
			}
			
			private function focusNextChatTab(e:ShortcutEvent):void{
				if (chatTabs.selectedIndex < chatTabs.numChildren - 1){
					chatTabs.selectedIndex++;
				}
				else{
					chatTabs.selectedIndex = 0;
				}
			}
			          		
			private function onTabClose(e:SuperTabEvent):void{
				dispatchEvent(e);
			}
			
			private function onUserClosedTab(e:SuperTabEvent):void{
				var name:String = chatTabs.getChildAt(e.tabIndex).name;
			}
									
		]]>
	</mx:Script>
	<containers:SuperTabNavigator id="chatTabs" width="100%" height="100%" change="onTabNavChange()" tabClose="onTabClose(event)" minTabWidth="20"
								  dragEnabled="false" popUpButtonPolicy="off"/>
</mx:VBox>
