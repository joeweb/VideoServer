<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
      x="168" y="86" layout="absolute" width="700" height="410" styleName="presentationFileUploadWindowStyle"
      initialize="initData();">

    <mate:Dispatcher id="globalDispatch" />
    <mate:Listener type="{UploadEvent.UPLOAD_PROGRESS_UPDATE}" method="uploadProgressUpdate" />
    <mate:Listener type="{UploadEvent.UPLOAD_COMPLETE}" method="uploadComplete" />
    <mate:Listener type="{UploadEvent.UPLOAD_IO_ERROR}" method="uploadIOError" />
    <mate:Listener type="{UploadEvent.UPLOAD_SECURITY_ERROR}" method="uploadSecurityError" />
    <mate:Listener type="{UploadEvent.CONVERT_ERROR}" method="convertError" />
    <mate:Listener type="{UploadEvent.CONVERT_SUCCESS}" method="convertSuccess" />
    <mate:Listener type="{UploadEvent.CONVERT_UPDATE}" method="convertUpdate" />
    <mate:Listener type="{UploadEvent.UPDATE_PROGRESS}" method="updateProgress" />
    <mate:Listener type="{UploadEvent.THUMBNAILS_UPDATE}" method="handleThumbnailsProgressEvent" />
    <mate:Listener type="{UploadEvent.OFFICE_DOC_CONVERSION_FAILED}" method="handleOfficeDocumentConversionFailed"/>
    <mate:Listener type="{UploadEvent.OFFICE_DOC_CONVERSION_SUCCESS}" method="handleOfficeDocumentConversionSuccess"/>
    <mate:Listener type="{UploadEvent.SUPPORTED_DOCUMENT}" method="handleSupportedDocument"/>	
    <mate:Listener type="{UploadEvent.UNSUPPORTED_DOCUMENT}" method="handleUnsupportedDocument"/>
    <mate:Listener type="{UploadEvent.PAGE_COUNT_FAILED}" method="handlePageCountFailed"/>
    <mate:Listener type="{UploadEvent.PAGE_COUNT_EXCEEDED}" method="handlePageCountExceeded"/>

  <mx:Script>
    <![CDATA[
      import org.bigbluebutton.common.LogUtil;
      import com.asfusion.mate.events.Dispatcher;			
      import mx.collections.*;
      import mx.events.FlexEvent;
      import mx.events.ValidationResultEvent;
      import mx.managers.PopUpManager;
      import mx.utils.*;
      import mx.validators.*;			
      import org.bigbluebutton.common.Images;
      import org.bigbluebutton.modules.present.events.RemovePresentationEvent;
      import org.bigbluebutton.modules.present.events.UploadEvent;
      import org.bigbluebutton.util.i18n.ResourceUtil;

            	
      [Bindable] public var presentationNamesAC:ArrayCollection;

      private var images:Images = new Images();
      [Bindable] private var addIcon : Class = images.add;
      [Bindable] private var bulletGoIcon : Class = images.bulletGo;
      [Bindable] private var deleteIcon : Class = images.cancel;

      private var thumbnailTimer:Timer = new Timer(5000);
      private var genThumbText:String = ResourceUtil.getInstance().getString('bbb.fileupload.genThumbText');
      private var genThumbDots:String = ".";

      private var fileToUpload:FileReference = new FileReference();

      private function initData():void {
        if (presentationNamesAC.length <= 0) {
          selectFile();
        }
      }
            
      private function handleThumbnailsProgressEvent(event:Event):void {	
        genThumbDots = ".";

        thumbnailTimer.repeatCount = 20;
        thumbnailTimer.addEventListener(TimerEvent.TIMER, timerHandler);
        thumbnailTimer.addEventListener(TimerEvent.TIMER_COMPLETE, completeHandler);           
        thumbnailTimer.start();				
      }

      private function handleConvertSuccessEvent(event:Event):void {
        thumbnailTimer.stop();
      }

      private function timerHandler(e:TimerEvent):void{
        displayGeneratingThumbnailsMessage();
      }

      private function completeHandler(e:TimerEvent):void {
        displayGeneratingThumbnailsMessage();
        thumbnailTimer.stop();
      }

      private function displayGeneratingThumbnailsMessage():void {
        genThumbDots += ".";
        progressBar.label = genThumbText + genThumbDots;
      }

      private function selectFile():void{
        fileToUpload.addEventListener(Event.SELECT, onSelectFile);	
        fileToUpload.browse([
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.presentationfile'), "*.pdf;*.doc;*.docx;*.xls;*.xlsx;*.ppt;*.pptx;*.txt;*.rtf;*.odt;*.ods;*.odp;*.odg;*.odc;*.odi;*.jpg;*.png"), 
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.pdf'), "*.pdf"),
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.word'), "*.doc;*.docx;*.odt;*.rtf;*.txt"), 
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.excel'), "*.xls;*.xlsx;*.ods"),
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.powerpoint'), "*.ppt;*.pptx;*.odp"),
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.image'), "*.jpg;*.jpeg;*.png")]);
      }

      private function onSelectFile(e:Event):void{
        fileTxtInput.text = fileToUpload.name;
        uploadBtn.enabled = true;
      }

      private function startUpload():void {
        var fileSize:Number = fileToUpload.size;
        var maxFileSize:Number = 30000000;

        if (fileSize > maxFileSize) {     
          // Hardcode for now to 30M limit. 
          // This should be configurable to match what's allowed in nginx. (ralam feb 23, 2010) 
          trace("File exceeds max limit:(" + fileSize + ">" + maxFileSize + ")");  			
          enableControls();
          displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.maxUploadFileExceededAlert'));
        } else {
          var presentationName:String = StringUtil.trim(fileToUpload.name);
          trace("Uploading file : " + presentationName);

          var filenamePattern:RegExp = /(.+)(\..+)/i;
          // Get the first match which should be the filename without the extension.
          presentationName = presentationName.replace(filenamePattern, "$1")
          // Replace any character other than a word character (A-Z, a-z, 0-9, or _).
          presentationName = presentationName.replace(/[^0-9a-zA-Z_\.]/g, "-");
          trace("Uploadling presentation name: " + presentationName);

          var uploadEvent:UploadEvent = new UploadEvent(UploadEvent.START_UPLOAD);
          uploadEvent.presentationName = presentationName;
          uploadEvent.fileToUpload = fileToUpload;
          globalDispatch.dispatchEvent(uploadEvent);

          progBarLbl.visible = true;
          progressBar.visible = true;

          okCancelBtn.visible = true;
          selectBtn.enabled = false;
          uploadBtn.enabled = false;
          fileTxtInput.enabled = false;

          presentationNamesLb.visible = false;

        }       		
      }

      private function uploadProgressUpdate(e:UploadEvent):void{
        var progress:Number = e.percentageComplete;
        progressBar.label = progress + "% " + ResourceUtil.getInstance().getString('bbb.presentation.uploaded');
        progressBar.setProgress(progress, 100);
        progressBar.validateNow();
      }

      private function uploadComplete(e:UploadEvent):void{
        progressBar.label = ResourceUtil.getInstance().getString('bbb.presentation.uploadcomplete');
        progressBar.setProgress(0, 100);
        progressBar.validateNow();

        fileLbl.visible = false;
        selectBtn.visible = false;
        uploadBtn.visible = false;
        fileTxtInput.visible = false;
      }

      private function handleOfficeDocumentConversionFailed(e:UploadEvent):void {
        enableControls();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.document.convert.failed'));
      }   

      private function handleOfficeDocumentConversionSuccess(e:UploadEvent):void {
        progressBar.label = ResourceUtil.getInstance().getString('bbb.presentation.document.converted');
        progressBar.setProgress(0, 100);
        progressBar.validateNow();
      }

      private function handleSupportedDocument(e:UploadEvent):void {
        LogUtil.debug("handleSupportedDocument");
        progressBar.label = ResourceUtil.getInstance().getString('bbb.presentation.document.supported');
        progressBar.setProgress(0, 100);
        progressBar.validateNow();
      }

      private function handleUnsupportedDocument(e:UploadEvent):void {
        enableControls();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.convert.notsupported'));
      }

      private function handlePageCountFailed(e:UploadEvent):void {
        enableControls();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.convert.nbpage'));
      }

      private function handlePageCountExceeded(e:UploadEvent):void {
        LogUtil.debug("handlePageCountExceeded");
        enableControls();
        var message:String = " Maximum supported is " + e.maximumSupportedNumberOfSlides;
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.convert.maxnbpagereach'), message);
      }

      private function uploadIOError(e:UploadEvent):void{
        enableControls();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.io'));
      }

      private function uploadSecurityError(e:UploadEvent):void{
        enableControls();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.security'));
      }

      private function displayAlert(error:String, message:String = null):void {
        var okLabel:String = ResourceUtil.getInstance().getString('bbb.presentation.ok');        	
        progressBar.setStyle("color", 0xFF0000);
        progressBar.label = error + message;
        okCancelBtn.label = "Ok";
      }

      private function enableControls():void {
        okCancelBtn.visible = true;
        selectBtn.enabled = true;
        uploadBtn.enabled = true;
        fileTxtInput.enabled = true;			
      }

      private function convertUpdate(e:UploadEvent):void{
        progressBar.label = ResourceUtil.getInstance().getString('bbb.presentation.converted',[e.completedSlides, e.totalSlides]);
        progressBar.setProgress(e.completedSlides, e.totalSlides);
        progressBar.validateNow();
      }

      private function convertError(e:UploadEvent):void{
        enableControls();
        okCancelBtn.label = "Ok";
        okCancelBtn.visible = true;
        globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW));
      }

      private function convertSuccess(e:UploadEvent):void{
        okCancelBtn.label = ResourceUtil.getInstance().getString('bbb.presentation.ok');
        okCancelBtn.visible = true;
        globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW));
      }

      //Unlike UploadProgress, this event comes from the PresentSOService, not the UploadService
      private function updateProgress(e:UploadEvent):void{

      }

  ]]>

  </mx:Script>

  <mx:VBox width="100%" height="100%">
    <mx:Label text="{ResourceUtil.getInstance().getString('bbb.fileupload.title')}" styleName="presentationUploadTitleStyle"/>
    <mx:Spacer height="10"/>
    <mx:HBox width="100%">
      <mx:Spacer height="5"/>
      <mx:Label id="fileLbl" text="{ResourceUtil.getInstance().getString('bbb.fileupload.fileLbl')}" styleName="presentationUploadChooseFileLabelStyle"/>
      <mx:Spacer width="100%"/>
      <mx:Button label="{ResourceUtil.getInstance().getString('bbb.fileupload.selectBtn.label')}" id="selectBtn" 
                 toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.selectBtn.toolTip')}" 
                 click="selectFile()" styleName="presentationUploadChooseFileButtonStyle"/>
      <mx:Spacer width="5"/>
    </mx:HBox>
    <mx:Spacer height="5"/>
    <mx:HBox width="100%"> 
      <mx:Spacer width="5"/>
      <mx:TextInput id="fileTxtInput" width="328" editable="false"/>
      <mx:Button id="uploadBtn" label="{ResourceUtil.getInstance().getString('bbb.fileupload.uploadBtn')}" 
                 toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.uploadBtn.toolTip')}"  click="startUpload()"
                 enabled="false" icon="{bulletGoIcon}"/>
    </mx:HBox>
    <mx:Spacer height="5"/>
    <mx:HBox width="100%">
      <mx:Spacer width="10"/>
      <mx:Label id="progBarLbl" text="{ResourceUtil.getInstance().getString('bbb.fileupload.progBarLbl')}" 
                styleName="presentationUploadProgressBarLabelStyle"
                visible="false"/>
      <mx:ProgressBar id="progressBar" mode="manual" label="{ResourceUtil.getInstance().getString('bbb.fileupload.progBarLbl')}"
                      styleName="presentationUploadProgressBarStyle"
                      labelPlacement="center" width="460" visible="false"/>      
    </mx:HBox>
    <mx:Spacer height="10"/>
    <mx:HBox width="100%">
      <mx:Spacer width="5"/>
      <mx:Label id="presentationNamesLb" text="{ResourceUtil.getInstance().getString('bbb.fileupload.presentationNamesLbl')}" styleName="presentationNamesLabelStyle"/>
    </mx:HBox>  
    <mx:Spacer height="5"/>
    <mx:HBox width="90%" height="100">
      <mx:Spacer width="10"/>
      <mx:List id="presentationNamesList" width="90%" height="100" alternatingItemColors="[#EFEFEF, #FEFEFE]" allowMultipleSelection="false"
               itemRenderer="org.bigbluebutton.modules.present.ui.views.UploadedPresentationRenderer"
               dragEnabled="false" dataProvider="{presentationNamesAC}">
      </mx:List>
    </mx:HBox>
    <mx:Spacer height="5"/>
    <mx:HBox width="100%">
      <mx:Spacer width="100%"/>
      <mx:Button id="okCancelBtn" label="{ResourceUtil.getInstance().getString('bbb.fileupload.okCancelBtn')}"
                 styleName="presentationUploadCancelButtonStyle"
                 click="globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW))"/>
      <mx:Spacer width="5"/>
    </mx:HBox>	
  </mx:VBox>

</mx:TitleWindow> 
