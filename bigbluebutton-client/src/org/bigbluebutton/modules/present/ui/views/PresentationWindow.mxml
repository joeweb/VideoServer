<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->


<pres:MDIWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:thumb="org.bigbluebutton.modules.present.views.*"
	xmlns:pres="flexlib.mdi.containers.*"
	xmlns:code="http://code.google.com/p/flexlib/" 
	xmlns:containers="flexlib.containers.*"
	xmlns:mate="http://mate.asfusion.com/"
	showCloseButton="false" layout="absolute"
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off" 
	showControls="true" resize="maximizeHandler()"
  styleNameFocus="presentationWindowStyleFocus"
  styleNameNoFocus="presentationWindowStyleNoFocus"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	creationComplete="onCreationComplete()" 
	width="{DEFAULT_WINDOW_WIDTH}" height="{DEFAULT_WINDOW_HEIGHT}" 
	x="{DEFAULT_X_POSITION}" y="{DEFAULT_Y_POSITION}"
	title="{currentPresentation}"
	xmlns:views="org.bigbluebutton.modules.present.ui.views.*">
	
	<mate:Dispatcher id="globalDispatcher" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="becomePresenter" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="becomeViewer" />
	<mate:Listener type="{PresentationEvent.PRESENTATION_LOADED}" method="handlePresentationLoadedEvent" />
	<mate:Listener type="{NavigationEvent.GOTO_PAGE}" method="gotoPage" />
    <mate:Listener type="{NavigationEvent.BIND_KEYBOARD_EVENT}" method="bindToKeyboardEvents" />
	<mate:Listener type="{UploadEvent.CLEAR_PRESENTATION}" method="clearPresentation" />
	<mate:Listener type="{SlideResizedEvent.SLIDE_RESIZED_EVENT}" method="handleSlideResizedEvent" />
	<mate:Listener type="{DisplaySlideEvent.DISPLAY_SLIDE_EVENT}" method="handleDisplaySlideEvent" />
	<mate:Listener type="{AddOverlayCanvasEvent.ADD_OVERLAY_CANVAS}" method="addOverlayCanvas" />
	<mate:Listener type="{AddButtonToPresentationEvent.ADD_BUTTON}" method="addButton" />
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
	
	<mx:Script>
		<![CDATA[
			import flash.geom.Point;			
			import flexlib.containers.DockableToolBar;
			import flexlib.mdi.events.MDIWindowEvent;			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.core.Application;
			import mx.effects.Move;
			import mx.events.ListEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.*;			
			import org.bigbluebutton.common.IBbbCanvas;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.present.api.IPresentationButton;
			import org.bigbluebutton.modules.present.events.AddButtonToPresentationEvent;
			import org.bigbluebutton.modules.present.events.AddOverlayCanvasEvent;
			import org.bigbluebutton.modules.present.events.DisplaySlideEvent;
			import org.bigbluebutton.modules.present.events.MoveEvent;
			import org.bigbluebutton.modules.present.events.NavigationEvent;
			import org.bigbluebutton.modules.present.events.PresentationEvent;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import org.bigbluebutton.modules.present.events.SlideEvent;
			import org.bigbluebutton.modules.present.events.SlideResizedEvent;
			import org.bigbluebutton.modules.present.events.UploadEvent;
			import org.bigbluebutton.modules.present.events.WindowResizedEvent;
			import org.bigbluebutton.modules.present.events.ZoomEvent;
			import org.bigbluebutton.modules.present.managers.Slide;
			import org.bigbluebutton.modules.present.managers.SlideManager;
			import org.bigbluebutton.util.i18n.ResourceUtil;
             			
      public static const TITLE:String = "Presentation";
			private static const NEXT_BUTTON:String = "Next";
			private static const PREVIOUS_BUTTON:String = "Previous";
			private static const GOTO_PAGE_BUTTON:String = "Go to Page...";
						
			[Bindable] 
      private var thumbY:Number;
			public var uploadWindow:FileUploadWindow = null;
			private var slideManager:SlideManager = new SlideManager();
			private var pageDialog:GotoPageDialog;
			
			[Bindable] private var DEFAULT_X_POSITION:Number = 237;
			[Bindable] private var DEFAULT_Y_POSITION:Number = 0;
			
			[Bindable] private var CONTROL_BAR_HEIGHT:Number = 45;
			private static const TOP_WINDOW_BORDER:Number = 30;
			private static const WIDTH_PADDING:Number = 6;

			[Bindable] private var DEFAULT_WINDOW_WIDTH:Number = 510;
			[Bindable] private var DEFAULT_WINDOW_HEIGHT:Number = 451;
			[Bindable] private var viewportW:Number = 451;
			[Bindable] private var viewportH:Number = 451;
			
			// Init to the size of the window.
			private var currentSlideWidth:Number = DEFAULT_WINDOW_WIDTH;
			private var currentSlideHeight:Number = DEFAULT_WINDOW_HEIGHT;
									
			private var mouseDown:Boolean = false;
			[Bindable] private var isPresenter:Boolean = false;
			[Bindable] private var presentationLoaded:Boolean = false;
			[Bindable] private var currentPresentation:String = "";
			
			private var externalButtons:ArrayCollection = new ArrayCollection();
			
			private function maximizeHandler():void {
//				LogUtil.debug("Max handler");
				// When the window is maximized, we want to resize the slide maintaining the aspect ratio.			
				fitSlideToWindowMaintainingAspectRatio();
				//Remove focus from the maximize button in case the user presses the space bar, the window doesn't get maximized again.	
				stage.focus = this; 
			}
					
			private function onCreationComplete():void{
				thumbY = this.height - 160;
                bindKeyboardEvents();
				this.addEventListener(MDIWindowEvent.RESIZE_END, onResizeEndEvent);
				slideView.addEventListener(ListEvent.ITEM_ROLL_OVER, onItemRollOver);
			}
			
			private function onItemRollOver(e:ListEvent):void{
				this.displaySlideNumber(e.columnIndex + 1);
			}
			
			private function onResizeEndEvent(event:MDIWindowEvent):void {
//				LogUtil.debug("onResizeEndEvent");
				fitSlideToWindowMaintainingAspectRatio();
			}
			
			[Bindable] private var fitToPage:Boolean = true;
			
			private function fitSlideToWindowMaintainingAspectRatio():void {
				if (this.minimized) return;
				
				// Send the available space to display the slide.				
				sendWindowResizedEvent((this.width - WIDTH_PADDING), (this.height - CONTROL_BAR_HEIGHT - TOP_WINDOW_BORDER));
			}
			
			/*
			 * Notify the slide container telling it the available dimensions to display the slide.
			 */
			private function sendWindowResizedEvent(parentWidth:Number, parentHeight:Number):void {
				var dispatcher:Dispatcher = new Dispatcher();
				var dispEvent:WindowResizedEvent = new WindowResizedEvent(WindowResizedEvent.PRESENTATION_WINDOW_RESIZED_EVENT);
				dispEvent.width = parentWidth;
				dispEvent.height = parentHeight;
				dispEvent.fitToPage = fitToPage;
				dispEvent.old_width = this.slideView.width;
				dispEvent.old_height = this.slideView.height;
				dispatcher.dispatchEvent(dispEvent);
				
				slideView.onParentResized(parentWidth, parentHeight);
			}
			
			private function handleDisplaySlideEvent(event:DisplaySlideEvent):void {				
				currentSlideWidth = event.slideWidth;
				currentSlideHeight = event.slideHeight;		
				fitSlideToWindowMaintainingAspectRatio();			
			}
			
            private function bindToKeyboardEvents(event:NavigationEvent):void {
                if (event.bindToKeyboard) {
                    LogUtil.debug("******************************************** Binding to keyboard events ********************");
                    bindKeyboardEvents();
                } else {
                    LogUtil.debug("********************************************* Unbinding to keyboard events *****************");
                    unbindKeyboardEvents();
                }
            }
            
            private function unbindKeyboardEvents():void {
                stage.removeEventListener(KeyboardEvent.KEY_UP, onKeyUp);
            }

            private function bindKeyboardEvents():void {
                stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
            }
            
			private function onKeyUp(event:KeyboardEvent):void {	
                if (event.shiftKey && event.ctrlKey) {
                    switch (event.keyCode) {
                        case Keyboard.LEFT:
                        case Keyboard.UP:
                        case Keyboard.PAGE_UP:			
                            gotoPreviousSlide();		
                            break;
                        case Keyboard.DOWN:
                        case Keyboard.RIGHT: 
                        case Keyboard.SPACE:
                        case Keyboard.PAGE_DOWN:
                        case Keyboard.ENTER:
                            gotoNextSlide();
                            break; 
                    }                    
                }
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.MIDDLE;
			}
			
			/**
			 * Hide the thumbnails in case the user moves the mouse outside this window
			 */
			private function hideThumbs():void{
				if (slideView.slides != null)
					displaySlideNumber(slideView.selectedSlide + 1);
			}
						
			private function onSliderZoom():void {
				slideView.onZoomSlide(zoomSlider.value);
			}
			
			private function dispatchResizeEvent(newSize:int):void {
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.RESIZE);
				presentEvent.newSizeInPercent = newSize;
				dispatchEvent(presentEvent);
			}
			
			private function onResetZoom():void {
				zoomSlider.value = 100;
				slideView.onZoomSlide(zoomSlider.value);
			}
			
			private function handleSlideResizedEvent(e:SlideResizedEvent):void{
				zoomSlider.value = e.percent;
			}
						
			private function becomePresenter(e:MadePresenterEvent):void{
				setupPresenter(true, e.presenterName);
				addContextMenuItems();
			}
			
			private function becomeViewer(e:MadePresenterEvent):void{
				setupPresenter(false, e.presenterName);
				dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW));
				this.contextMenu = new ContextMenu();
				this.contextMenu.hideBuiltInItems();
				if (slideView.thumbnailView.visible)
					showThumbnails();
			}
						
			private function setupPresenter(isPresenter:Boolean, presentersName:String):void {
				this.isPresenter = isPresenter;
				uploadPres.visible = isPresenter;
				
				if (presentationLoaded) {
	            	displaySlideNumber(slideView.selectedSlide + 1);	
					displaySlideNavigationControls(isPresenter);
				}
					
				notifyComponentsOfPresenterChange(isPresenter, presentersName);
			}
					
			private function handlePresentationLoadedEvent(e:PresentationEvent):void {	
				if (e.presentationName == currentPresentation) return;			
				currentPresentation = e.presentationName;
				presentationLoaded = true;
				slideView.setSlides(e.slides.slides);    		            		
				slideView.visible = true;		
	
				if (slideManager != null) slideManager.clear();	
				displaySlideNumber(slideView.selectedSlide + 1);	
				if (isPresenter) {
					displaySlideNavigationControls(true);					
					notifyOthersOfSharingPresentation(e.presentationName);
				} else {
					dispatchEvent(new SlideEvent(SlideEvent.LOAD_CURRENT_SLIDE));
				}
				onResetZoom();
			}
			
			private function displaySlideNavigationControls(show:Boolean):void {
				backButton.visible = show;
				forwardButton.visible = show;
				zoomSlider.visible = show;
				btnSlideNum.visible = show;
				btnFitToWidth.visible = show;
				btnFitToPage.visible = show;
				setButtonsVisibility(show);
			}
			
			private function addContextMenuItems():void{
				var contextMenu:ContextMenu = new ContextMenu();
				contextMenu.hideBuiltInItems();
				
				var nextButton:ContextMenuItem = new ContextMenuItem(NEXT_BUTTON);
				nextButton.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemHandler);
				contextMenu.customItems.push(nextButton);
				
				var previousButton:ContextMenuItem = new ContextMenuItem(PREVIOUS_BUTTON);
				previousButton.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemHandler);
				contextMenu.customItems.push(previousButton);
				
				var gotoPageButton:ContextMenuItem = new ContextMenuItem(GOTO_PAGE_BUTTON);
				gotoPageButton.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemHandler);
				contextMenu.customItems.push(gotoPageButton);
				
				this.contextMenu = contextMenu;
			}
			
			private function menuItemHandler(e:ContextMenuEvent):void{
				switch(e.target.caption){
					case NEXT_BUTTON:
						gotoNextSlide();
						break;
					case PREVIOUS_BUTTON:
						gotoPreviousSlide();
						break;
					case GOTO_PAGE_BUTTON:
						showPageDialog();
						break;
				}
			}
			
			private function showPageDialog():void{
				if (pageDialog != null) PopUpManager.removePopUp(pageDialog);
				pageDialog = new GotoPageDialog();
				pageDialog.totalSlides = slideView.slides.length;
				pageDialog.x = this.x + this.width/2 - pageDialog.width/2;
				pageDialog.y = this.y + this.height/2 - pageDialog.height/2;
				pageDialog.window = this;
				PopUpManager.addPopUp(pageDialog, this, false);
			}
			
			private function notifyOthersOfSharingPresentation(presentationName:String):void {
				var shareEvent:PresenterCommands = new PresenterCommands(PresenterCommands.SHARE_PRESENTATION_COMMAND);
					shareEvent.presentationName = presentationName;
					shareEvent.share = true;
					dispatchEvent(shareEvent);
			}
			
			private function gotoPage(e:NavigationEvent):void{
				loadPage(e.pageNumber);
			}
			
			public function loadPage(pageNumber:int):void{
				slideView.selectedSlide = pageNumber;
				
				if (validPageNumber(pageNumber)) {
					loadSlide(pageNumber);
					disableSlideNavigationButtons(pageNumber);
					displaySlideNumber(pageNumber + 1);
				}	
			}
			
			private function loadSlide(page:int):void {
				slideManager.load(slideView.slides.getItemAt(page) as Slide);
			}
			
			private function validPageNumber(pageNumber:int):Boolean {
				return (pageNumber <= slideView.slides.length-1 && pageNumber >= 0)
			}
			
			private function disableSlideNavigationButtons(pageNumber:int):void {
				if (pageNumber == 0) {
					backButton.enabled = false;
				} else {
					backButton.enabled = true;
				}
				
				if (pageNumber < slideView.slides.length - 1) {
					forwardButton.enabled = true;
				} else {
					forwardButton.enabled = false;
				}
			}
			
			private function displaySlideNumber(currentSlide:int):void {
				btnSlideNum.label = "" + currentSlide + '/' + slideView.slides.length;
			}
			
			private function clearPresentation(e:UploadEvent):void{
				slideView.visible = false;		
				slideView.slideLoader.source = null; 
				slideView.selectedSlide = 0;
				btnSlideNum.label = "";
				displaySlideNavigationControls(false);

				// Change the title of the window.
				currentPresentation = ResourceUtil.getInstance().getString('bbb.presentation.title');				
			}
			
			private function gotoPreviousSlide():void {
				if ((slideView.selectedSlide - 1) >= 0)
					dispatchEvent(new PresenterCommands(PresenterCommands.GOTO_SLIDE, slideView.selectedSlide - 1));
			}
			
			private function gotoNextSlide():void {
				if ((slideView.selectedSlide + 1) < slideView.slides.length)
					dispatchEvent(new PresenterCommands(PresenterCommands.GOTO_SLIDE, slideView.selectedSlide + 1));
			}
			
			private function removeDecimalFromDataTip(val:String):String {			
                return val; 
            }
            
            private function showThumbnails():void{
            	slideView.thumbnailView.visible = !slideView.thumbnailView.visible;
            	setComponentsEnabled(!slideView.thumbnailView.visible);
				slideView.addEventListener(SlideView.THUMBNAILS_CLOSED, thumnailsClosed);
            }
            
            private function addOverlayCanvas(e:AddOverlayCanvasEvent):void{
				LogUtil.debug("OVERLAYING WHITEBOARD CANVAS");
				e.canvas.acceptOverlayCanvas(slideView);
            	slideView.acceptOverlayCanvas(e.canvas);
            	
            }
            
            /**
            * Adds a button to the toolbar. The button is added by external modules through the API.
            */
            private function addButton(e:AddButtonToPresentationEvent):void{
            	var button:IPresentationButton = e.button;
            	externalButtons.addItem(button);
 				this.presCtrlBar.addChild(button as Button);
 				button.buttonAdded(this);
            }
            
            /**
            * Sets the visibility of buttons added throught the Presentation API
            */
            private function setButtonsVisibility(visible:Boolean):void{
            	for (var i:int = 0; i < externalButtons.length; i++){
            		(externalButtons.getItemAt(i) as IPresentationButton).setButtonVisibility(visible);
            	}
            }
			
			/**
			 * Executed when the thumbnails viewer is closed
			 */
			private function thumnailsClosed(e:Event):void{
				slideView.removeEventListener(SlideView.THUMBNAILS_CLOSED, thumnailsClosed);
				setComponentsEnabled(true);
			}
            
            /**
            * Sets the enabled of buttons added throught the Presentation API
            */
            private function setComponentsEnabled(enabled:Boolean):void{
            	for (var i:int = 0; i<externalButtons.length; i++){
            		(externalButtons.getItemAt(i) as IPresentationButton).setComponentEnabled(enabled);
            	}
            }
			
			private function notifyComponentsOfPresenterChange(isPresenter:Boolean, presenterName:String):void{
				for (var i:int = 0; i<externalButtons.length; i++){
					(externalButtons.getItemAt(i) as IPresentationButton).presenterChanged(isPresenter, presenterName);
				}
			}
					
			override protected function resourcesChanged():void{
				super.resourcesChanged();
				if ((slideView != null) && (!slideView.visible)) this.title = ResourceUtil.getInstance().getString('bbb.presentation.title');
			}
			
			private function localeChanged(e:LocaleChangeEvent):void{
				resourcesChanged();
			}
			
			private function onFitToPage(ftp:Boolean):void {				
				fitToPage = ftp;
				slideView.switchToFitToPage(fitToPage);
				fitSlideToWindowMaintainingAspectRatio();				
			}
      
      private function onUploadButtonClicked():void {
        dispatchEvent(new UploadEvent(UploadEvent.OPEN_UPLOAD_WINDOW));
      }
			          
		]]>
	</mx:Script>
  	 
	<mx:Fade id="thumbFadeIn" alphaFrom="1" alphaTo="0" duration="100" />
	<mx:Fade id="thumbFadeOut" alphaFrom="0" alphaTo="1" duration="100" />

	<views:SlideView id="slideView" width="100%" height="100%" visible="false" mouseDown="mouseDown = true"
			 mouseUp="mouseDown = false" verticalScrollPolicy="off" horizontalScrollPolicy="off" />			    
  <mx:ControlBar id="presCtrlBar" width="100%" height="{CONTROL_BAR_HEIGHT}" styleName="presentationWindowControlsStyle" >
    	  <mx:Button id="uploadPres" visible="false" width="25" height="25" styleName="presentationUploadButtonStyle"
    	   		toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.uploadPresBtn.toolTip')}" 
    	   		click="onUploadButtonClicked()"/>        	  
    	  <mx:Spacer width="50%" id="spacer1"/>
    	  <mx:Button id="backButton" visible="false" width="30" height="20" styleName="presentationBackButtonStyle"
    	   		toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.backBtn.toolTip')}" click="gotoPreviousSlide()"/>
    	  <mx:Button id="btnSlideNum" visible="false" label="" click="showThumbnails()" doubleClick="showPageDialog()" 
					 toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.slideNumLbl.toolTip')}"/>
    	  <mx:Button id="forwardButton" visible="false" width="30" height="20" styleName="presentationForwardButtonStyle"
    	   		toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.forwardBtn.toolTip')}" click="gotoNextSlide()"/>    				
		<mx:Spacer width="10%" id="spacer2"/>
    	 
		<mx:HSlider id="zoomSlider" visible="false" value="{slideView.zoomPercentage}" styleName="presentationZoomSliderStyle"
    		minimum="100" maximum="400" dataTipPlacement="top" labels="['100%','400%']" 
    		useHandCursor="true" snapInterval="5" allowTrackClick="true" liveDragging="true" 
    		dataTipFormatFunction="removeDecimalFromDataTip" change="onSliderZoom()" width="100"/>
    	<mx:Spacer width="50%" id="spacer3"/>
    	<mx:Button id="btnFitToWidth" visible="false" width="25" height="25" styleName="presentationFitToWidthButtonStyle"
				   toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.fitToWidth.toolTip')}" 
				   click="onFitToPage(false)"/>
		<mx:Button id="btnFitToPage" visible="false" width="25" height="25" styleName="presentationFitToPageButtonStyle"
				   toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.fitToPage.toolTip')}" 
				   click="onFitToPage(true)"/>
    	<mx:Spacer width="5" id="spacer4"/>
    </mx:ControlBar>
</pres:MDIWindow>
