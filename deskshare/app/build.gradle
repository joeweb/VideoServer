usePlugin 'scala'
usePlugin 'java'
usePlugin 'war'

version = '0.71'

jar.enabled = true

archivesBaseName = 'bbb-deskshare-app' 

dependencies {	  
    providedCompile 'javax.servlet:servlet-api:2.5@jar'
	
	providedCompile 'mina:mina-core:2.0.4@jar' 

	
	// Spring
	providedCompile 'org.springframework:spring-web:3.0.6.RELEASE@jar'
	providedCompile  'org.springframework:spring-beans:3.0.6.RELEASE@jar'
	providedCompile 'org.springframework:spring-context:3.0.6.RELEASE@jar'
	providedCompile 'org.springframework:spring-core:3.0.6.RELEASE@jar'
	compile 'org.springframework:spring-webmvc:3.0.6.RELEASE@jar'
		
	providedCompile 'org/red5:red5:1.0r4415@jar'
	

	// Logging
	providedCompile 'org.slf4j:com.springsource.slf4j.api:1.6.1@jar'
	providedCompile 'org.slf4j:com.springsource.slf4j.bridge:1.6.1@jar'
	providedCompile ':logback-core:0.9.28@jar'
	providedCompile ':logback-classic:0.9.28@jar'
	providedCompile ':log4j-over-slf4j:1.6.1@jar'
	providedCompile ':jcl-over-slf4j:1.6.1@jar'
	providedCompile ':jul-to-slf4j:1.6.1@jar'
	
	compile project(':common')
    compile 'commons-fileupload:commons-fileupload:1.2.2@jar'
	compile 'commons-io:commons-io:2.1@jar' 
    
    // Libraries needed to run the scala tools
    scalaTools 'org.scala-lang:scala-compiler:2.9.2'
    scalaTools 'org.scala-lang:scala-library:2.9.2'

	// workaround for http://issues.gradle.org/browse/GRADLE-1273
	compileScala.classpath = sourceSets.main.compileClasspath + files(sourceSets.main.classesDir)
	compileTestScala.classpath = sourceSets.test.compileClasspath + files(sourceSets.test.classesDir)
	
    // Libraries needed for scala api
    compile 'org.scala-lang:scala-library:2.9.2'   
    compile 'net.lag:configgy:2.0.0'
    
        // Testing
    compile 'org.testng:testng:5.8@jar' 
    compile 'org.easymock:easymock:2.4@jar'

	// Testing
	testRuntime 'org/testng:testng:5.8@jar'
	testRuntime 'org.easymock:easymock:2.4@jar'
	
        //redis
	compile 'redis.clients:jedis:1.5.1'
	compile 'commons-pool:commons-pool:1.5.6'
}

test {
	useTestNG() 
}

war.doLast {
  ant.unzip(src: war.archivePath, dest: "$buildDir/deskshare")
  ant.copy(file: "$buildDir/deskshare/WEB-INF/logback-deskshare.xml", todir: "$buildDir/deskshare/WEB-INF/classes")
}

task deploy() << {
	def red5AppsDir = '/usr/share/red5/webapps'
	def deskshareDir = new File("${red5AppsDir}/deskshare")
	println "Deleting $deskshareDir"
	ant.delete(dir: deskshareDir)
	ant.mkdir(dir: deskshareDir)
	ant.copy(todir: deskshareDir) {
    	fileset(dir: "$buildDir/deskshare")
    }
} 
